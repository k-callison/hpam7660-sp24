{
  "hash": "3c9b3f7009cd6c128f2d0a6a488e8f07",
  "result": {
    "markdown": "---\ntitle: \"R Programming Cheat Sheet\"\nslug: cheatsheet\n---\n\n\nYou will need to load the following libraries in RStudio before attempting some of the techniques in this tutorial.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ninstall.packages(\"nycflights13\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe following package(s) will be installed:\n- nycflights13 [1.0.2]\nThese packages will be installed into \"~/Dropbox/Documents/Teaching Materials/Health Policy/GitHub Site/hpam7660-sp24/renv/library/R-4.3/x86_64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing nycflights13 ...                   OK [linked from cache]\nSuccessfully installed 1 package in 17 milliseconds.\n```\n:::\n\n```{.r .cell-code}\nlibrary(nycflights13)\ninstall.packages(\"gapminder\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe following package(s) will be installed:\n- gapminder [1.0.0]\nThese packages will be installed into \"~/Dropbox/Documents/Teaching Materials/Health Policy/GitHub Site/hpam7660-sp24/renv/library/R-4.3/x86_64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing gapminder ...                      OK [linked from cache]\nSuccessfully installed 1 package in 12 milliseconds.\n```\n:::\n\n```{.r .cell-code}\nlibrary(gapminder)\n```\n:::\n\n\n\n## R Basics\n\n### Creating a vector \n\nYou can create a vector using the `c` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Any R code that begins with the # character is a comment\n## Comments are ignored by R\n\nmy_numbers <- c(4, 8, 15, 16, 23, 42) # Anything after # is also a\n# comment\nmy_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4  8 15 16 23 42\n```\n:::\n:::\n\n\n\n### Installing and loading a package\n\nYou can install a package with the `install.packages` function, passing the name of the package to be installed as a string (that is, in quotes):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\nYou can load a package into the R environment by calling `library()` with the name of package without quotes. You should only have one package per library call. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n### Calling functions from specific packages\n\nWe can also use the `mypackage::` prefix to access package functions without loading:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(head(mtcars))\n```\n\n::: {.cell-output-display}\n|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n:::\n:::\n\n\n## Data Visualization\n\n### Scatter plot\n\nYou can produce a scatter plot with using the `x` and `y` aesthetics along with the `geom_point()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Smoothed curves \n\nYou can add a smoothed curve that summarizes the relationship between two variables with the `geom_smooth()` function. By default, it uses a  loess smoother to estimated the conditional mean of the y-axis variable as a function of the x-axis variable. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### Adding a regression line \n\n`geom_smooth` can also add a regression line by setting the argument `method = \"lm\"` and we can turn off the shaded regions around the line with `se = FALSE`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() + geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Changing the scale of the axes\n\nIf we want the scale of the x-axis to be logged to stretch out the data we can use the `scale_x_log10()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Adding informative labels to a plot\n\nUse the `labs()` to add informative labels to the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  scale_x_log10() +\n  labs(x = \"Population Density\",\n       y = \"Percent of County Below Poverty Line\",\n       title = \"Poverty and Population Density\",\n       subtitle = \"Among Counties in the Midwest\",\n       source = \"US Census, 2000\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/labels-1.png){width=672}\n:::\n:::\n\n\n### Mapping aesthetics to variables\n\nIf you would like to map an aesthetic to a variable for all geoms in the plot, you can put it in the `aes` call in the `ggplot()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty,\n                     color = state,\n                     fill = state)) +\n  geom_point() +\n  geom_smooth() +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### Mapping aesthetics for a single geom\n\nYou can also map aesthetics for a specific geom using the `mapping` argument to that function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point(mapping = aes(color = state)) +\n  geom_smooth(color = \"black\") +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Setting the aesthetics for all observations\n\nIf you would like to set the color or size or shape of a geom for all data points (that is, not mapped to any variables), be sure to set these outside of `aes()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point(color = \"purple\") +\n  geom_smooth() +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Histograms\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = percbelowpoverty)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/histogram-1.png){width=672}\n:::\n:::\n\n\n\n## Data Wrangling\n\n### Subsetting a data frame\n\nUse the `filter()` function from the `dplyr` package to subset a data frame. In this example, you'll use the nycflights13 data and filter by United Airlines flights.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\n\nflights |> filter(carrier == \"UA\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58,665 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      554            558        -4      740            728\n 4  2013     1     1      558            600        -2      924            917\n 5  2013     1     1      558            600        -2      923            937\n 6  2013     1     1      559            600        -1      854            902\n 7  2013     1     1      607            607         0      858            915\n 8  2013     1     1      611            600        11      945            931\n 9  2013     1     1      623            627        -4      933            932\n10  2013     1     1      628            630        -2     1016            947\n# â„¹ 58,655 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\nYou can filter based on multiple conditions to subset to the rows that meet all conditions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> filter(carrier == \"UA\", origin == \"JFK\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,534 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      558            600        -2      924            917\n 2  2013     1     1      611            600        11      945            931\n 3  2013     1     1      803            800         3     1132           1144\n 4  2013     1     1      829            830        -1     1152           1200\n 5  2013     1     1     1112           1100        12     1440           1438\n 6  2013     1     1     1127           1130        -3     1504           1448\n 7  2013     1     1     1422           1425        -3     1748           1759\n 8  2013     1     1     1522           1530        -8     1858           1855\n 9  2013     1     1     1726           1729        -3     2042           2100\n10  2013     1     1     1750           1750         0     2109           2115\n# â„¹ 4,524 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\nYou can use the `|` operator to match one of two conditions (\"OR\" rather than \"AND\"):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  flights |> filter(carrier == \"UA\" | carrier == \"AA\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 91,394 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      558            600        -2      753            745\n 6  2013     1     1      558            600        -2      924            917\n 7  2013     1     1      558            600        -2      923            937\n 8  2013     1     1      559            600        -1      941            910\n 9  2013     1     1      559            600        -1      854            902\n10  2013     1     1      606            610        -4      858            910\n# â„¹ 91,384 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\nTo test if a variable is one of several possible values, you can also use the `%in%` command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> filter(carrier %in% c(\"UA\", \"AA\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 91,394 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      558            600        -2      753            745\n 6  2013     1     1      558            600        -2      924            917\n 7  2013     1     1      558            600        -2      923            937\n 8  2013     1     1      559            600        -1      941            910\n 9  2013     1     1      559            600        -1      854            902\n10  2013     1     1      606            610        -4      858            910\n# â„¹ 91,384 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\nIf you want to subset to a set of specific row numbers, you can use the `slice` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## subset to the first 5 rows\nflights |> slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 Ã— 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\nHere the `1:5` syntax tells R to produce a vector that starts at 1 and ends at 5, incrementing by 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n### Filtering to the largest/smallest values of a variable\n\nTo subset to the rows that have the largest or smallest values of a given variable, use the `slice_max` and `slice_max` functions. For the largest  values, use `slice_max` and use the `n` argument to specify how many rows you want:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> slice_max(dep_time, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013    10    30     2400           2359         1      327            337\n 2  2013    11    27     2400           2359         1      515            445\n 3  2013    12     5     2400           2359         1      427            440\n 4  2013    12     9     2400           2359         1      432            440\n 5  2013    12     9     2400           2250        70       59           2356\n 6  2013    12    13     2400           2359         1      432            440\n 7  2013    12    19     2400           2359         1      434            440\n 8  2013    12    29     2400           1700       420      302           2025\n 9  2013     2     7     2400           2359         1      432            436\n10  2013     2     7     2400           2359         1      443            444\n# â„¹ 19 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\nTo get lowest values, use `slice_min`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> slice_min(dep_time, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1    13        1           2249        72      108           2357\n 2  2013     1    31        1           2100       181      124           2225\n 3  2013    11    13        1           2359         2      442            440\n 4  2013    12    16        1           2359         2      447            437\n 5  2013    12    20        1           2359         2      430            440\n 6  2013    12    26        1           2359         2      437            440\n 7  2013    12    30        1           2359         2      441            437\n 8  2013     2    11        1           2100       181      111           2225\n 9  2013     2    24        1           2245        76      121           2354\n10  2013     3     8        1           2355         6      431            440\n# â„¹ 15 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\n### Sorting rows by a variable\n\nYou can sort the rows of a data set using the `arrange()` function. By default, this will sort the rows from smallest to largest. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> arrange(dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1    13        1           2249        72      108           2357\n 2  2013     1    31        1           2100       181      124           2225\n 3  2013    11    13        1           2359         2      442            440\n 4  2013    12    16        1           2359         2      447            437\n 5  2013    12    20        1           2359         2      430            440\n 6  2013    12    26        1           2359         2      437            440\n 7  2013    12    30        1           2359         2      441            437\n 8  2013     2    11        1           2100       181      111           2225\n 9  2013     2    24        1           2245        76      121           2354\n10  2013     3     8        1           2355         6      431            440\n# â„¹ 336,766 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\nIf you would like to sort the rows from largest to smallest (descending order), you can wrap the variable name with `desc()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> arrange(desc(dep_time))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013    10    30     2400           2359         1      327            337\n 2  2013    11    27     2400           2359         1      515            445\n 3  2013    12     5     2400           2359         1      427            440\n 4  2013    12     9     2400           2359         1      432            440\n 5  2013    12     9     2400           2250        70       59           2356\n 6  2013    12    13     2400           2359         1      432            440\n 7  2013    12    19     2400           2359         1      434            440\n 8  2013    12    29     2400           1700       420      302           2025\n 9  2013     2     7     2400           2359         1      432            436\n10  2013     2     7     2400           2359         1      443            444\n# â„¹ 336,766 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\n### Selecting/subsetting the columns\n\nYou can subset the data to only certain columns using the `select()` command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> select(dep_time, arr_time, dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 3\n   dep_time arr_time dest \n      <int>    <int> <chr>\n 1      517      830 IAH  \n 2      533      850 IAH  \n 3      542      923 MIA  \n 4      544     1004 BQN  \n 5      554      812 ATL  \n 6      554      740 ORD  \n 7      555      913 FLL  \n 8      557      709 IAD  \n 9      557      838 MCO  \n10      558      753 ORD  \n# â„¹ 336,766 more rows\n```\n:::\n:::\n\n\nIf you want to select a range of columns from, say, `callsign` to `ideology`, you can use the `:` operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> select(dep_time:arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 6\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1      517            515         2      830            819        11\n 2      533            529         4      850            830        20\n 3      542            540         2      923            850        33\n 4      544            545        -1     1004           1022       -18\n 5      554            600        -6      812            837       -25\n 6      554            558        -4      740            728        12\n 7      555            600        -5      913            854        19\n 8      557            600        -3      709            723       -14\n 9      557            600        -3      838            846        -8\n10      558            600        -2      753            745         8\n# â„¹ 336,766 more rows\n```\n:::\n:::\n\n\nYou can remove a variable from the data set by using the minus sign `-` in front of it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> select(-year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 18\n   month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1     1     1      517            515         2      830            819\n 2     1     1      533            529         4      850            830\n 3     1     1      542            540         2      923            850\n 4     1     1      544            545        -1     1004           1022\n 5     1     1      554            600        -6      812            837\n 6     1     1      554            558        -4      740            728\n 7     1     1      555            600        -5      913            854\n 8     1     1      557            600        -3      709            723\n 9     1     1      557            600        -3      838            846\n10     1     1      558            600        -2      753            745\n# â„¹ 336,766 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\nYou can also drop several variables using the `c()` function or the `(a:b)` syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> select(-c(year, month, day))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 16\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n      <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>  \n 1      517            515         2      830            819        11 UA     \n 2      533            529         4      850            830        20 UA     \n 3      542            540         2      923            850        33 AA     \n 4      544            545        -1     1004           1022       -18 B6     \n 5      554            600        -6      812            837       -25 DL     \n 6      554            558        -4      740            728        12 UA     \n 7      555            600        -5      913            854        19 B6     \n 8      557            600        -3      709            723       -14 EV     \n 9      557            600        -3      838            846        -8 B6     \n10      558            600        -2      753            745         8 AA     \n# â„¹ 336,766 more rows\n# â„¹ 9 more variables: flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n\n```{.r .cell-code}\nflights |> select(-(year:day))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 16\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n      <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>  \n 1      517            515         2      830            819        11 UA     \n 2      533            529         4      850            830        20 UA     \n 3      542            540         2      923            850        33 AA     \n 4      544            545        -1     1004           1022       -18 B6     \n 5      554            600        -6      812            837       -25 DL     \n 6      554            558        -4      740            728        12 UA     \n 7      555            600        -5      913            854        19 B6     \n 8      557            600        -3      709            723       -14 EV     \n 9      557            600        -3      838            846        -8 B6     \n10      558            600        -2      753            745         8 AA     \n# â„¹ 336,766 more rows\n# â„¹ 9 more variables: flight <int>, tailnum <chr>, origin <chr>, dest <chr>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\nYou can also select columns based on matching patterns in the names with functions like `starts_with()` or `ends_with()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> select(ends_with(\"delay\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 2\n   dep_delay arr_delay\n       <dbl>     <dbl>\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# â„¹ 336,766 more rows\n```\n:::\n:::\n\n\n\nThis code finds all variables with column names that end with the string \"delay\". See the [help page for `select()`](https://dplyr.tidyverse.org/reference/select.html) for more information on different ways to select. \n\n\n### Renaming a variable \n\nYou can rename a variable useing the function `rename(new_name = old_name)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> rename(flight_number = flight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# â„¹ 336,766 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight_number <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\n### Creating new variables \n\nYou can create new variables that are functions of old variables using the `mutate()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> mutate(flight_length = arr_time - dep_time) |> select(arr_time, dep_time, flight_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 3\n   arr_time dep_time flight_length\n      <int>    <int>         <int>\n 1      830      517           313\n 2      850      533           317\n 3      923      542           381\n 4     1004      544           460\n 5      812      554           258\n 6      740      554           186\n 7      913      555           358\n 8      709      557           152\n 9      838      557           281\n10      753      558           195\n# â„¹ 336,766 more rows\n```\n:::\n:::\n\n\n\n### Creating new variables based on yes/no conditions\n\nIf you want to create a new variable that can take on two values based on a logical conditional, you should use the `if_else()` function inside of `mutate()`. For instance, if we want to create a more nicely labeled version of the `sinclair2017` variable (which is 0/1), we could do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(late = if_else(arr_delay > 0,\n                             \"Flight Delayed\",\n                             \"Flight On Time\")) |>\n  select(arr_delay, late)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 2\n   arr_delay late          \n       <dbl> <chr>         \n 1        11 Flight Delayed\n 2        20 Flight Delayed\n 3        33 Flight Delayed\n 4       -18 Flight On Time\n 5       -25 Flight On Time\n 6        12 Flight Delayed\n 7        19 Flight Delayed\n 8       -14 Flight On Time\n 9        -8 Flight On Time\n10         8 Flight Delayed\n# â„¹ 336,766 more rows\n```\n:::\n:::\n\n\n\n### Summarizing a variable \n\nYou can calculate summaries of variables in the data set using the `summarize()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  summarize(\n    avg_dep_time = mean(dep_time),\n    sd_dep_time = sd(dep_time),\n    median_dep_time = median(dep_time)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 Ã— 3\n  avg_dep_time sd_dep_time median_dep_time\n         <dbl>       <dbl>           <int>\n1           NA          NA              NA\n```\n:::\n:::\n\n\n\n\n### Summarizing variables by groups of rows\n\nBy default, `summarize()` calculates the summaries of variables for all rows in the data frame. You can also calculate these summaries within groups of rows defined by another variable in the data frame using the `group_by()` function before summarizing. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(carrier) |>\n  summarize(\n    avg_dep_time = mean(dep_time),\n    sd_dep_time = sd(dep_time),\n    median_dep_time = median(dep_time)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 Ã— 4\n   carrier avg_dep_time sd_dep_time median_dep_time\n   <chr>          <dbl>       <dbl>           <dbl>\n 1 9E               NA         NA                NA\n 2 AA               NA         NA                NA\n 3 AS               NA         NA                NA\n 4 B6               NA         NA                NA\n 5 DL               NA         NA                NA\n 6 EV               NA         NA                NA\n 7 F9               NA         NA                NA\n 8 FL               NA         NA                NA\n 9 HA              949.        53.6             954\n10 MQ               NA         NA                NA\n11 OO               NA         NA                NA\n12 UA               NA         NA                NA\n13 US               NA         NA                NA\n14 VX               NA         NA                NA\n15 WN               NA         NA                NA\n16 YV               NA         NA                NA\n```\n:::\n:::\n\n\nHere, the `summarize()` function breaks apart the original data into smaller data frames for each carrier and applies the summary functions to those, then combines everything into one tibble. \n\n\n### Summarizing by multiple variables\n\nYou can group by multiple variables and `summarize()` will create groups based on every combination of each variable: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(carrier, month) |>\n  summarize(\n    avg_dep_time = mean(dep_time)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'carrier'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 185 Ã— 3\n# Groups:   carrier [16]\n   carrier month avg_dep_time\n   <chr>   <int>        <dbl>\n 1 9E          1           NA\n 2 9E          2           NA\n 3 9E          3           NA\n 4 9E          4           NA\n 5 9E          5           NA\n 6 9E          6           NA\n 7 9E          7           NA\n 8 9E          8           NA\n 9 9E          9           NA\n10 9E         10           NA\n# â„¹ 175 more rows\n```\n:::\n:::\n\n\nYou'll notice the message that `summarize()` sends after using to let us know that resulting tibble is grouped by `carrier`. By default, `summarize()` drops the last group you provided in `group_by` (`month` in this case).  This isn't an error message, it's just letting us know some helpful information. If you want to avoid this messaging displaying, you need to specify what grouping you want after using the `.groups` argument:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(carrier, month) |>\n  summarize(\n    avg_dep_time = mean(dep_time),\n    .groups = \"drop_last\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 185 Ã— 3\n# Groups:   carrier [16]\n   carrier month avg_dep_time\n   <chr>   <int>        <dbl>\n 1 9E          1           NA\n 2 9E          2           NA\n 3 9E          3           NA\n 4 9E          4           NA\n 5 9E          5           NA\n 6 9E          6           NA\n 7 9E          7           NA\n 8 9E          8           NA\n 9 9E          9           NA\n10 9E         10           NA\n# â„¹ 175 more rows\n```\n:::\n:::\n\n\n\n### Summarizing across many variables\n\n\nIf you want to apply the same summary to multiple variables, you can use the `across(vars, fun)` function, where `vars` is a vector of variable names (specified like with `select()`) and `fun` is a summary function to apply to those variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(carrier, month) |>\n  summarize(\n    across(c(dep_time, dep_delay), mean)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'carrier'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 185 Ã— 4\n# Groups:   carrier [16]\n   carrier month dep_time dep_delay\n   <chr>   <int>    <dbl>     <dbl>\n 1 9E          1       NA        NA\n 2 9E          2       NA        NA\n 3 9E          3       NA        NA\n 4 9E          4       NA        NA\n 5 9E          5       NA        NA\n 6 9E          6       NA        NA\n 7 9E          7       NA        NA\n 8 9E          8       NA        NA\n 9 9E          9       NA        NA\n10 9E         10       NA        NA\n# â„¹ 175 more rows\n```\n:::\n:::\n\n\nAs with `select()`, you can use the `:` operator to select a range of variables \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(carrier, month) |>\n  summarize(\n    across(dep_time:arr_delay, mean)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'carrier'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 185 Ã— 8\n# Groups:   carrier [16]\n   carrier month dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <chr>   <int>    <dbl>          <dbl>     <dbl>    <dbl>          <dbl>\n 1 9E          1       NA          1485.        NA       NA          1676.\n 2 9E          2       NA          1471.        NA       NA          1661.\n 3 9E          3       NA          1472.        NA       NA          1664.\n 4 9E          4       NA          1502.        NA       NA          1697.\n 5 9E          5       NA          1509.        NA       NA          1712.\n 6 9E          6       NA          1512.        NA       NA          1718.\n 7 9E          7       NA          1493.        NA       NA          1702.\n 8 9E          8       NA          1497.        NA       NA          1706.\n 9 9E          9       NA          1458.        NA       NA          1658.\n10 9E         10       NA          1432.        NA       NA          1632.\n# â„¹ 175 more rows\n# â„¹ 1 more variable: arr_delay <dbl>\n```\n:::\n:::\n\n\n\n### Table of counts of a categorical variable\n\nThere are two way to produce a table of counts of each category of a variable. The first is to use `group_by` and `summarize` along with the summary function `n()`, which returns the numbers of rows in each grouping (that is, each combination of the grouping variables):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(carrier) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 Ã— 2\n   carrier     n\n   <chr>   <int>\n 1 9E      18460\n 2 AA      32729\n 3 AS        714\n 4 B6      54635\n 5 DL      48110\n 6 EV      54173\n 7 F9        685\n 8 FL       3260\n 9 HA        342\n10 MQ      26397\n11 OO         32\n12 UA      58665\n13 US      20536\n14 VX       5162\n15 WN      12275\n16 YV        601\n```\n:::\n:::\n\n\nA simpler way to acheive the same outcome is to use the `count()` function, which implements these two steps:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> count(carrier)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 Ã— 2\n   carrier     n\n   <chr>   <int>\n 1 9E      18460\n 2 AA      32729\n 3 AS        714\n 4 B6      54635\n 5 DL      48110\n 6 EV      54173\n 7 F9        685\n 8 FL       3260\n 9 HA        342\n10 MQ      26397\n11 OO         32\n12 UA      58665\n13 US      20536\n14 VX       5162\n15 WN      12275\n16 YV        601\n```\n:::\n:::\n\n\n\n\n\n### Producing nicely formatted tables with `kable()`\n\nYou can take any tibble in R and convert it into a more readable output by passing it to `knitr::kable()`. In our homework, generally, we will save the tibble as an object and then pass it to this function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_summary <- flights |>\n  group_by(month) |>\n  summarize(\n    avg_arr_delay = mean(arr_delay),\n    sd_arr_delay = sd(arr_delay)\n  )\n\nknitr::kable(month_summary)\n```\n\n::: {.cell-output-display}\n| month| avg_arr_delay| sd_arr_delay|\n|-----:|-------------:|------------:|\n|     1|            NA|           NA|\n|     2|            NA|           NA|\n|     3|            NA|           NA|\n|     4|            NA|           NA|\n|     5|            NA|           NA|\n|     6|            NA|           NA|\n|     7|            NA|           NA|\n|     8|            NA|           NA|\n|     9|            NA|           NA|\n|    10|            NA|           NA|\n|    11|            NA|           NA|\n|    12|            NA|           NA|\n:::\n:::\n\n\n\nYou can add informative column names to the table using the `col.names` argument. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(\n  month_summary,\n  col.names = c(\"Month\", \"Average Delay\", \"SD of Delay\")\n)\n```\n\n::: {.cell-output-display}\n| Month| Average Delay| SD of Delay|\n|-----:|-------------:|-----------:|\n|     1|            NA|          NA|\n|     2|            NA|          NA|\n|     3|            NA|          NA|\n|     4|            NA|          NA|\n|     5|            NA|          NA|\n|     6|            NA|          NA|\n|     7|            NA|          NA|\n|     8|            NA|          NA|\n|     9|            NA|          NA|\n|    10|            NA|          NA|\n|    11|            NA|          NA|\n|    12|            NA|          NA|\n:::\n:::\n\n\nFinally, we can round the numbers in the table to be a bit nicer using the `digits` argument. This will tell `kable()` how many significant digits to show. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(\n  month_summary,\n  col.names = c(\"Month\", \"Average Delay\", \"SD of Delay\"),\n  digits = 3\n)\n```\n\n::: {.cell-output-display}\n| Month| Average Delay| SD of Delay|\n|-----:|-------------:|-----------:|\n|     1|            NA|          NA|\n|     2|            NA|          NA|\n|     3|            NA|          NA|\n|     4|            NA|          NA|\n|     5|            NA|          NA|\n|     6|            NA|          NA|\n|     7|            NA|          NA|\n|     8|            NA|          NA|\n|     9|            NA|          NA|\n|    10|            NA|          NA|\n|    11|            NA|          NA|\n|    12|            NA|          NA|\n:::\n:::\n\n\n\n### Barplots of counts\n\nYou can visualize counts of a variable using a barplot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  ggplot(mapping = aes(x = carrier)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n### Barplots of other summaries \n\nWe can use barplots to visualize other grouped summaries like means, but we need to use the `geom_col()` geom instead and specify the variable you want to be the height of the bars. We also want to filter our data so that only values of `arr_delay` that are greater than zero are considered. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(arr_delay > 0) |>\n  group_by(carrier) |>\n  summarize(\n    avg_delay = mean(arr_delay)\n  ) |>\n  ggplot(mapping = aes(x = carrier, y = avg_delay)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\n### Reordering/sorting barplot axes \n\nOften we want to sort the barplot axes to be in the order of the variable of interest so we can quickly compare them. We can use the `fct_reorder(group_var, ordering_var)` function to do this where the `group_var` is the grouping variable that is going on the axes and the `ordering_var` is the variable that we will sort the groups on. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(arr_delay > 0) |>\n  group_by(carrier) |>\n  summarize(\n    avg_delay = mean(arr_delay)\n  ) |>\n  ggplot(mapping = aes(x = fct_reorder(carrier, avg_delay),\n                       y = avg_delay)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n### Coloring barplots by another variable \n\nYou can color the barplots by a another variable using the `fill` aesthetic:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(arr_delay > 0) |>\n  group_by(carrier) |>\n  summarize(\n    avg_delay = mean(arr_delay)\n  ) |>\n  slice_max(avg_delay, n = 10) |>\n  ggplot(mapping = aes(y = fct_reorder(carrier, avg_delay),\n                       x = avg_delay)) +\n  geom_col(mapping = aes(fill = carrier))\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\n### Creating logical vectors\n\nYou can create logical variables in your tibbles using mutate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(\n    late = arr_delay > 0,\n    fall = month == 9  | month == 10| month == 11,\n    .keep = \"used\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 Ã— 4\n   month arr_delay late  fall \n   <int>     <dbl> <lgl> <lgl>\n 1     1        11 TRUE  FALSE\n 2     1        20 TRUE  FALSE\n 3     1        33 TRUE  FALSE\n 4     1       -18 FALSE FALSE\n 5     1       -25 FALSE FALSE\n 6     1        12 TRUE  FALSE\n 7     1        19 TRUE  FALSE\n 8     1       -14 FALSE FALSE\n 9     1        -8 FALSE FALSE\n10     1         8 TRUE  FALSE\n# â„¹ 336,766 more rows\n```\n:::\n:::\n\n\n\nThe `.keep = \"used\"` argument here tells mutate to only return the variables created and any variables used to create them. We're using it here for display purposes. \n\nYou can filter based on these logical variables. In particular, if we want to subset to rows where both `late` and `fall` were `TRUE` we could do the following filter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(\n    late = arr_delay > 0,\n    fall = month == 9  | month == 10| month == 11,\n    .keep = \"used\"\n  ) |>\n  filter(late & fall)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26,307 Ã— 4\n   month arr_delay late  fall \n   <int>     <dbl> <lgl> <lgl>\n 1    10        11 TRUE  TRUE \n 2    10        12 TRUE  TRUE \n 3    10         4 TRUE  TRUE \n 4    10        16 TRUE  TRUE \n 5    10         7 TRUE  TRUE \n 6    10         4 TRUE  TRUE \n 7    10         6 TRUE  TRUE \n 8    10         1 TRUE  TRUE \n 9    10         9 TRUE  TRUE \n10    10        83 TRUE  TRUE \n# â„¹ 26,297 more rows\n```\n:::\n:::\n\n\n### Using `!` to negate logicals\n\nAny time you place the exclamation point in front of a logical, it will turn any `TRUE` into a `FALSE` and vice versa. For instance, if we wanted on-time flights in the fall, we could used\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(\n    late = arr_delay > 0,\n    fall = month == 9  | month == 10| month == 11,\n    .keep = \"used\"\n  ) |>\n  filter(!late & fall)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 56,292 Ã— 4\n   month arr_delay late  fall \n   <int>     <dbl> <lgl> <lgl>\n 1    10       -34 FALSE TRUE \n 2    10       -22 FALSE TRUE \n 3    10       -46 FALSE TRUE \n 4    10       -26 FALSE TRUE \n 5    10       -16 FALSE TRUE \n 6    10       -20 FALSE TRUE \n 7    10       -23 FALSE TRUE \n 8    10       -12 FALSE TRUE \n 9    10       -10 FALSE TRUE \n10    10        -3 FALSE TRUE \n# â„¹ 56,282 more rows\n```\n:::\n:::\n\n\nOr if we wanted to subset to any combination **except** late flights and fall, we could negate the AND statement using parentheses:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  mutate(\n    late = arr_delay > 0,\n    fall = month == 9  | month == 10| month == 11,\n    .keep = \"used\"\n  ) |>\n  filter(!(late & fall))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 309,337 Ã— 4\n   month arr_delay late  fall \n   <int>     <dbl> <lgl> <lgl>\n 1     1        11 TRUE  FALSE\n 2     1        20 TRUE  FALSE\n 3     1        33 TRUE  FALSE\n 4     1       -18 FALSE FALSE\n 5     1       -25 FALSE FALSE\n 6     1        12 TRUE  FALSE\n 7     1        19 TRUE  FALSE\n 8     1       -14 FALSE FALSE\n 9     1        -8 FALSE FALSE\n10     1         8 TRUE  FALSE\n# â„¹ 309,327 more rows\n```\n:::\n:::\n\n\nThis is often used in combination with `%in%` to acheive a \"not in\" logical:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(!(carrier %in% c(\"AA\", \"UA\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 245,382 Ã— 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      544            545        -1     1004           1022\n 2  2013     1     1      554            600        -6      812            837\n 3  2013     1     1      555            600        -5      913            854\n 4  2013     1     1      557            600        -3      709            723\n 5  2013     1     1      557            600        -3      838            846\n 6  2013     1     1      558            600        -2      849            851\n 7  2013     1     1      558            600        -2      853            856\n 8  2013     1     1      559            559         0      702            706\n 9  2013     1     1      600            600         0      851            858\n10  2013     1     1      600            600         0      837            825\n# â„¹ 245,372 more rows\n# â„¹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n:::\n:::\n\n\n\n### Grouped summaries with `any()` and `all()` \n\nOnce you group a tibble, you can summarize logicals within groups using two commands. `any()` will return `TRUE` if a logical is `TRUE` for any row in a group and `FALSE` otherwise. `all()` will return `TRUE` when the logical inside it is `TRUE` for all rows in a group and `FALSE` otherwise. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(carrier) |>\n  summarize(\n    any_late = any(arr_delay > 0),\n    never_late = all(arr_delay <=0)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 Ã— 3\n   carrier any_late never_late\n   <chr>   <lgl>    <lgl>     \n 1 9E      TRUE     FALSE     \n 2 AA      TRUE     FALSE     \n 3 AS      TRUE     FALSE     \n 4 B6      TRUE     FALSE     \n 5 DL      TRUE     FALSE     \n 6 EV      TRUE     FALSE     \n 7 F9      TRUE     FALSE     \n 8 FL      TRUE     FALSE     \n 9 HA      TRUE     FALSE     \n10 MQ      TRUE     FALSE     \n11 OO      TRUE     FALSE     \n12 UA      TRUE     FALSE     \n13 US      TRUE     FALSE     \n14 VX      TRUE     FALSE     \n15 WN      TRUE     FALSE     \n16 YV      TRUE     FALSE     \n```\n:::\n:::\n",
    "supporting": [
      "cheatsheet_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}