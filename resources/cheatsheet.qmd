---
title: "R Programming Cheat Sheet"
slug: cheatsheet
---

You will need to load the following libraries in RStudio before attempting some of the techniques in this tutorial.
```{r}
#| label: packages
#| message: false
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
install.packages("gapminder")
library(gapminder)
```


## R Basics

### Creating a vector 

You can create a vector using the `c` function:

```{r}
## Any R code that begins with the # character is a comment
## Comments are ignored by R

my_numbers <- c(4, 8, 15, 16, 23, 42) # Anything after # is also a
# comment
my_numbers
```


### Installing and loading a package

You can install a package with the `install.packages` function, passing the name of the package to be installed as a string (that is, in quotes):

```{r}
#| eval = FALSE
install.packages("ggplot2")
```

You can load a package into the R environment by calling `library()` with the name of package without quotes. You should only have one package per library call. 

```{r}
library(ggplot2)
```

### Calling functions from specific packages

We can also use the `mypackage::` prefix to access package functions without loading:

```{r}
knitr::kable(head(mtcars))
```

## Data Visualization

### Scatter plot

You can produce a scatter plot with using the `x` and `y` aesthetics along with the `geom_point()` function. 

```{r}
ggplot(data = midwest,
       mapping = aes(x = popdensity,
                     y = percbelowpoverty)) +
  geom_point()
```


### Smoothed curves 

You can add a smoothed curve that summarizes the relationship between two variables with the `geom_smooth()` function. By default, it uses a  loess smoother to estimated the conditional mean of the y-axis variable as a function of the x-axis variable. 

```{r}
ggplot(data = midwest,
       mapping = aes(x = popdensity,
                     y = percbelowpoverty)) +
  geom_point() + geom_smooth()
```


### Adding a regression line 

`geom_smooth` can also add a regression line by setting the argument `method = "lm"` and we can turn off the shaded regions around the line with `se = FALSE`

```{r }
ggplot(data = midwest,
       mapping = aes(x = popdensity,
                     y = percbelowpoverty)) +
  geom_point() + geom_smooth(method = "lm", se = FALSE)
```

### Changing the scale of the axes

If we want the scale of the x-axis to be logged to stretch out the data we can use the `scale_x_log10()`:

```{r }
ggplot(data = midwest,
       mapping = aes(x = popdensity,
                     y = percbelowpoverty)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  scale_x_log10()
```

### Adding informative labels to a plot

Use the `labs()` to add informative labels to the plot:

```{r}
#| label: labels
ggplot(data = midwest,
       mapping = aes(x = popdensity,
                     y = percbelowpoverty)) +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) +
  scale_x_log10() +
  labs(x = "Population Density",
       y = "Percent of County Below Poverty Line",
       title = "Poverty and Population Density",
       subtitle = "Among Counties in the Midwest",
       source = "US Census, 2000")
```

### Mapping aesthetics to variables

If you would like to map an aesthetic to a variable for all geoms in the plot, you can put it in the `aes` call in the `ggplot()` function:

```{r }
ggplot(data = midwest,
       mapping = aes(x = popdensity,
                     y = percbelowpoverty,
                     color = state,
                     fill = state)) +
  geom_point() +
  geom_smooth() +
  scale_x_log10()
```


### Mapping aesthetics for a single geom

You can also map aesthetics for a specific geom using the `mapping` argument to that function:


```{r}
ggplot(data = midwest,
       mapping = aes(x = popdensity,
                     y = percbelowpoverty)) +
  geom_point(mapping = aes(color = state)) +
  geom_smooth(color = "black") +
  scale_x_log10()
```

### Setting the aesthetics for all observations

If you would like to set the color or size or shape of a geom for all data points (that is, not mapped to any variables), be sure to set these outside of `aes()`:

```{r }
ggplot(data = midwest,
       mapping = aes(x = popdensity,
                     y = percbelowpoverty)) +
  geom_point(color = "purple") +
  geom_smooth() +
  scale_x_log10()
```

### Histograms

```{r}
#| label: histogram
ggplot(data = midwest,
       mapping = aes(x = percbelowpoverty)) +
  geom_histogram()
```


## Data Wrangling

### Subsetting a data frame

Use the `filter()` function from the `dplyr` package to subset a data frame. In this example, you'll use the nycflights13 data and filter by United Airlines flights.


```{r}
library(nycflights13)

flights |> filter(carrier == "UA")
```


You can filter based on multiple conditions to subset to the rows that meet all conditions:


```{r}
flights |> filter(carrier == "UA", origin == "JFK")

```


You can use the `|` operator to match one of two conditions ("OR" rather than "AND"):

```{r}
  flights |> filter(carrier == "UA" | carrier == "AA")

```

To test if a variable is one of several possible values, you can also use the `%in%` command:

```{r}
flights |> filter(carrier %in% c("UA", "AA"))

```

If you want to subset to a set of specific row numbers, you can use the `slice` function:

```{r}
## subset to the first 5 rows
flights |> slice(1:5)
```


Here the `1:5` syntax tells R to produce a vector that starts at 1 and ends at 5, incrementing by 1:

```{r}
1:5
```

### Filtering to the largest/smallest values of a variable

To subset to the rows that have the largest or smallest values of a given variable, use the `slice_max` and `slice_max` functions. For the largest  values, use `slice_max` and use the `n` argument to specify how many rows you want:

```{r}
flights |> slice_max(dep_time, n = 5)
```

To get lowest values, use `slice_min`:

```{r}
flights |> slice_min(dep_time, n = 5)
```


### Sorting rows by a variable

You can sort the rows of a data set using the `arrange()` function. By default, this will sort the rows from smallest to largest. 

```{r}
flights |> arrange(dep_time)
```

If you would like to sort the rows from largest to smallest (descending order), you can wrap the variable name with `desc()`:

```{r}
flights |> arrange(desc(dep_time))
```


### Selecting/subsetting the columns

You can subset the data to only certain columns using the `select()` command:

```{r}
#| label: "select"
flights |> select(dep_time, arr_time, dest)
```

If you want to select a range of columns from, say, `callsign` to `ideology`, you can use the `:` operator:

```{r}
#| label: "select-range"
flights |> select(dep_time:arr_delay)
```

You can remove a variable from the data set by using the minus sign `-` in front of it:

```{r}
#| label: "select-minus"
flights |> select(-year)
```

You can also drop several variables using the `c()` function or the `(a:b)` syntax:

```{r}
flights |> select(-c(year, month, day))

flights |> select(-(year:day))
```


You can also select columns based on matching patterns in the names with functions like `starts_with()` or `ends_with()`:

```{r}
#| label: "ends_with"

flights |> select(ends_with("delay"))
```


This code finds all variables with column names that end with the string "delay". See the [help page for `select()`](https://dplyr.tidyverse.org/reference/select.html) for more information on different ways to select. 


### Renaming a variable 

You can rename a variable useing the function `rename(new_name = old_name)`:

```{r}
flights |> rename(flight_number = flight)
```


### Creating new variables 

You can create new variables that are functions of old variables using the `mutate()` function:


```{r}
flights |> mutate(flight_length = arr_time - dep_time) |> select(arr_time, dep_time, flight_length)
```


### Creating new variables based on yes/no conditions

If you want to create a new variable that can take on two values based on a logical conditional, you should use the `if_else()` function inside of `mutate()`. For instance, if we want to create a more nicely labeled version of the `sinclair2017` variable (which is 0/1), we could do:

```{r}
flights |>
  mutate(late = if_else(arr_delay > 0,
                             "Flight Delayed",
                             "Flight On Time")) |>
  select(arr_delay, late)
```


### Summarizing a variable 

You can calculate summaries of variables in the data set using the `summarize()` function.


```{r}
flights |>
  summarize(
    avg_dep_time = mean(dep_time),
    sd_dep_time = sd(dep_time),
    median_dep_time = median(dep_time)
  )
```



### Summarizing variables by groups of rows

By default, `summarize()` calculates the summaries of variables for all rows in the data frame. You can also calculate these summaries within groups of rows defined by another variable in the data frame using the `group_by()` function before summarizing. 


```{r}
flights |>
  group_by(carrier) |>
  summarize(
    avg_dep_time = mean(dep_time),
    sd_dep_time = sd(dep_time),
    median_dep_time = median(dep_time)
  )
```

Here, the `summarize()` function breaks apart the original data into smaller data frames for each carrier and applies the summary functions to those, then combines everything into one tibble. 


### Summarizing by multiple variables

You can group by multiple variables and `summarize()` will create groups based on every combination of each variable: 

```{r}
flights |>
  group_by(carrier, month) |>
  summarize(
    avg_dep_time = mean(dep_time)
  )
```

You'll notice the message that `summarize()` sends after using to let us know that resulting tibble is grouped by `carrier`. By default, `summarize()` drops the last group you provided in `group_by` (`month` in this case).  This isn't an error message, it's just letting us know some helpful information. If you want to avoid this messaging displaying, you need to specify what grouping you want after using the `.groups` argument:


```{r}
flights |>
  group_by(carrier, month) |>
  summarize(
    avg_dep_time = mean(dep_time),
    .groups = "drop_last"
  )
```


### Summarizing across many variables


If you want to apply the same summary to multiple variables, you can use the `across(vars, fun)` function, where `vars` is a vector of variable names (specified like with `select()`) and `fun` is a summary function to apply to those variables.

```{r}
flights |>
  group_by(carrier, month) |>
  summarize(
    across(c(dep_time, dep_delay), mean)
  )
```

As with `select()`, you can use the `:` operator to select a range of variables 

```{r}
flights |>
  group_by(carrier, month) |>
  summarize(
    across(dep_time:arr_delay, mean)
  )
```


### Table of counts of a categorical variable

There are two way to produce a table of counts of each category of a variable. The first is to use `group_by` and `summarize` along with the summary function `n()`, which returns the numbers of rows in each grouping (that is, each combination of the grouping variables):


```{r}
flights |>
  group_by(carrier) |>
  summarize(n = n())
```

A simpler way to acheive the same outcome is to use the `count()` function, which implements these two steps:


```{r}
flights |> count(carrier)
```




### Producing nicely formatted tables with `kable()`

You can take any tibble in R and convert it into a more readable output by passing it to `knitr::kable()`. In our homework, generally, we will save the tibble as an object and then pass it to this function. 

```{r}
month_summary <- flights |>
  group_by(month) |>
  summarize(
    avg_arr_delay = mean(arr_delay),
    sd_arr_delay = sd(arr_delay)
  )

knitr::kable(month_summary)
```


You can add informative column names to the table using the `col.names` argument. 

```{r}
knitr::kable(
  month_summary,
  col.names = c("Month", "Average Delay", "SD of Delay")
)
```

Finally, we can round the numbers in the table to be a bit nicer using the `digits` argument. This will tell `kable()` how many significant digits to show. 


```{r}
knitr::kable(
  month_summary,
  col.names = c("Month", "Average Delay", "SD of Delay"),
  digits = 3
)
```


### Barplots of counts

You can visualize counts of a variable using a barplot:


```{r}
flights |>
  ggplot(mapping = aes(x = carrier)) +
  geom_bar()
```


### Barplots of other summaries 

We can use barplots to visualize other grouped summaries like means, but we need to use the `geom_col()` geom instead and specify the variable you want to be the height of the bars. We also want to filter our data so that only values of `arr_delay` that are greater than zero are considered. 


```{r}
flights |>
  filter(arr_delay > 0) |>
  group_by(carrier) |>
  summarize(
    avg_delay = mean(arr_delay)
  ) |>
  ggplot(mapping = aes(x = carrier, y = avg_delay)) +
  geom_col()
```


### Reordering/sorting barplot axes 

Often we want to sort the barplot axes to be in the order of the variable of interest so we can quickly compare them. We can use the `fct_reorder(group_var, ordering_var)` function to do this where the `group_var` is the grouping variable that is going on the axes and the `ordering_var` is the variable that we will sort the groups on. 

```{r}
flights |>
  filter(arr_delay > 0) |>
  group_by(carrier) |>
  summarize(
    avg_delay = mean(arr_delay)
  ) |>
  ggplot(mapping = aes(x = fct_reorder(carrier, avg_delay),
                       y = avg_delay)) +
  geom_col()

```


### Coloring barplots by another variable 

You can color the barplots by a another variable using the `fill` aesthetic:

```{r}
flights |>
  filter(arr_delay > 0) |>
  group_by(carrier) |>
  summarize(
    avg_delay = mean(arr_delay)
  ) |>
  slice_max(avg_delay, n = 10) |>
  ggplot(mapping = aes(y = fct_reorder(carrier, avg_delay),
                       x = avg_delay)) +
  geom_col(mapping = aes(fill = carrier))
```


### Creating logical vectors

You can create logical variables in your tibbles using mutate:

```{r}
flights |>
  mutate(
    late = arr_delay > 0,
    fall = month == 9  | month == 10| month == 11,
    .keep = "used"
)
```


The `.keep = "used"` argument here tells mutate to only return the variables created and any variables used to create them. We're using it here for display purposes. 

You can filter based on these logical variables. In particular, if we want to subset to rows where both `late` and `fall` were `TRUE` we could do the following filter:

```{r}
flights |>
  mutate(
    late = arr_delay > 0,
    fall = month == 9  | month == 10| month == 11,
    .keep = "used"
  ) |>
  filter(late & fall)
```

### Using `!` to negate logicals

Any time you place the exclamation point in front of a logical, it will turn any `TRUE` into a `FALSE` and vice versa. For instance, if we wanted on-time flights in the fall, we could used


```{r}
flights |>
  mutate(
    late = arr_delay > 0,
    fall = month == 9  | month == 10| month == 11,
    .keep = "used"
  ) |>
  filter(!late & fall)
```

Or if we wanted to subset to any combination **except** late flights and fall, we could negate the AND statement using parentheses:


```{r}
flights |>
  mutate(
    late = arr_delay > 0,
    fall = month == 9  | month == 10| month == 11,
    .keep = "used"
  ) |>
  filter(!(late & fall))
```

This is often used in combination with `%in%` to acheive a "not in" logical:

```{r}
flights |>
  filter(!(carrier %in% c("AA", "UA")))
```


### Grouped summaries with `any()` and `all()` 

Once you group a tibble, you can summarize logicals within groups using two commands. `any()` will return `TRUE` if a logical is `TRUE` for any row in a group and `FALSE` otherwise. `all()` will return `TRUE` when the logical inside it is `TRUE` for all rows in a group and `FALSE` otherwise. 


```{r}
flights |>
  group_by(carrier) |>
  summarize(
    any_late = any(arr_delay > 0),
    never_late = all(arr_delay <=0)
  )
```



