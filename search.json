[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Instructor\n\n   Kevin Callison\n   Tidewater 1915\n   kcallison@tulane.edu\n\n\n\nOffice Hours\n\n   Tuesday/Thursday\n   2:15-3:15 PM\n   Tidewater 1915 or Zoom\n\n\n\n\nCourse Details\n\n   Tuesday/Thursday\n   1:00–2:15 PM\n   Tidewater 1202\n\n\n\n\nCourse Descripton\nHPAM 7660 presents an overview of health policy in the United States – its scope, its dynamics, and its conceptual and practical dilemmas. The course is designed to acquaint students with major issues in the policymaking process, specifically in formulating, implementing, and assessing those patterns of government decision. Students will explore the history and structure of the American health care system, as well as explore a policy issue of their choosing using the Bardach analytical method.\n\n\nCourse Materials\nWe will use the following online (and free!) textbook along with various readings that will be posted to the course website under the Assignments tab.\n\nIsmay, Chester and Albert Y. Kim. 2022. Statistical Inference via Data Science: A ModernDive into R and the Tidyverse.\n\nWe’ll use R in this class to conduct data analysis. R is free, open source, and available on all major platforms. RStudio (also free) is a graphical interface to R that is widely used to work with the R language. R is available in all Tulane computer labs and you are encouraged to bring your laptop to class if you’re able to. [Problem Set 0][ps0] will walk you through setting up with R, RStudio, and GitHub.\n\n\nCourse Evaluation\nThe following components and weights will be used to calculate your final grade:\n\n\n\n\n\n\n\nCategory\nPercent of Final Grade\n\n\n\n\nPolicy Memo\n30%\n\n\nCase Presentation\n20%\n\n\nReading Discussion Questions & Problem Sets\n20%\n\n\nClass Participation\n20%\n\n\nPeer Assessment\n10%\n\n\n\nPolicy Memo - throughout the semester, you will construct a policy memo to be submitted on the final day of class. The memo should advocate for a policy position of your choice and can be targeted to local leaders (e.g., mayor, city council, etc.), or state or federal legislators. The target audience will depend on the scope of your policy. The final draft of the policy memo should be approximately 8-10 pages, excluding references.\nThe University of Southern California library provides a good guide for writing a policy memo. Note that as the guide states: “You should not approach writing a policy memo in the same way as you would an academic research paper. Yes, there are certain commonalities in how the content is presented [e.g., a well-written problem statement], but the overarching objective of a policy memo is not to discover or create new knowledge. It is focused on providing a pre-determined group of readers the rationale for choosing a particular policy alternative or specific course of action. In this sense, most policy memos possess a component of advocacy and advice intended to promote evidence-based dialog about an issue.” Your policy memo will consist of the following 7 sections, that will be submitted individually throughout the semester before a final version of the memo to be submitted on the last day of class:\n\nExecutive summary\n\nIntroduction and problem definition (Bardach Step 1)\n\nIssue analysis (Bardach Step 2)\n\nProposed solutions (Bardach Steps 3, 4, & 5) \nStrategic recommendations (Bardach Step 6 & Step 7)\n\nConclusion (Bardach Step 8)\n\nReferences\n\n\nPolicy Memo Due Dates:\n\nProblem statement – Feb. 29th \nPreliminary reference list – March 14th \nIntroduction and problem definition draft – March 21st \nIssue analysis draft – March 28th\n\nProposed solutions draft – April 11th \n\nStrategic recommendations draft – April 25th \nExecutive summary and conclusions draft – May 2nd \nFinal draft – May 9th \n\nCase Presentation - The case presentation will take place on May 2nd. The case presentation will coincide with a series of panel discussion during our “virtual D.C. experience”. I’ll provide more detail on the schedule and content of these panels on the course website along with a rubric for the case presentations.\nReading Discussion Questions & Problem Sets – Reading discussion questions and problem sets will be due by class time one their assigned date. These will typically be submitted through GitHub, though some of the submissions early in the semester will use Canvas.\nPeer Assessment - The peer assessment component of your grade will consist of anonymous grading of your team contribution by the other members of your team (more specific details to follow).\nYour final course grade will be calculated according to the following ranges:\n\n\n\nLetter Grade\nPercentage\n\n\n\n\nA\n94% and above\n\n\nA-\n90 to 93.9%\n\n\nB+\n85 to 89.9%\n\n\nB\n80 to 84.9%\n\n\nB-\n75 to 79.9%\n\n\nC\n70 to 74.9%\n\n\nF\n&lt;70%\n\n\n\n\n\nLate Policy\nLate submissions will be given half credit.\n\n\nSPHTM Honor Code\nI expect that you will abide by the school’s Honor Code and Code of Academic Conduct. Failure to do so will result in referral to the Honor Board. I encourage you to discuss the lectures and coursework with your colleagues to facilitate your understanding of the material. But I expect that you will engage in independent scholarship when completing your own work, properly citing external assistance or sources. If you have any questions about these expectations, please refer to the code or ask me in advance.\n\n\nAmericans with Disabilities Act of 1990\nIt is the policy and practice of Tulane University to comply with the Americans with Disabilities Act (Pub. L. No. 101-336), Section 504 of the Rehabilitation Act of 1973 (Pub. L. No. 93-112, §504, as amended), and state and local requirements regarding individuals with disabilities. Under these laws, no qualified individual with a disability shall be denied access to or participation in services, programs, and activities of Tulane University. Students seeking academic adjustments or accommodations must register their disabilities with the Goldman Center for Student Accessibility.\n\n\nTitle IX\nTulane University recognizes the inherent dignity of all individuals and promotes respect for all people. As such, Tulane is committed to providing an environment free of all forms of discrimination including sexual and gender-based discrimination, harassment, and violence like sexual assault, intimate partner violence, and stalking. If you (or someone you know) has experienced or is experiencing these types of behaviors, know that you are not alone. Resources and support are available: you can learn more here. Any and all of your communications on these matters will be treated as either “Confidential” or “Private” as explained in the chart below. Please know that if you choose to confide in me I am mandated by the university to report to the Title IX Coordinator, as Tulane and I want to be sure you are connected with all the support the university can offer. You do not need to respond to outreach from the university if you do not want to.\n\n\n\n\n\n\n\nConfidential\nPrivate\n\n\n\n\nExcept in extreme circumstances, involving imminent danger to one’s self or others, nothing will be share without your explicit permission.\nConversations are kept as confidential as possible, but information is shared with key staff members so the University can offer resources and accommodations and take action if necessary for safety reasons.\n\n\nCounseling & Psychological Services (CAPS): (504) 314-2277\nCase Management & Victim Support Services (CMVSS): (504) 314-2160\n\n\nStudent Health Center Downtown: (504) 988-6929 Uptown: (504) 865-5255\nTulane University Police (TUPD) Downtown: (504) 988-5531 Uptown: (504) 865-5911\n\n\nSexual Aggression Peer Hotline and Education (SAPHE): (504) 654-9543\nTitle IX Coordinator: (504) 865-5611 or email: titleix@tulane.edu\n\n\n\n\n\nStudent Learning Objectives\n\nExhibit a conceptual understanding of the forces and factors accounting for legislation and regulation pertaining to health services.\n\nDevelop a framework to critically discuss and evaluate policy issues affecting the U.S. health care system.\n\nCompare and contrast the public policy objectives of various stakeholders with the realities of the political process.\n\nCritically evaluate the research literature that examines the federal and state roles in health services.\n\nEvaluate current proposals advanced in Congress and by the private sector that impact health services delivery.\n\nDemonstrate a working understanding of the legislative process and the related federal and state regulation processes.\n\n\n\n\nCourse Competencies\nThe Department of Health Policy & Management has adopted a set of competencies for evaluating each of our masters-level programs, including both the MPH in Health Policy and the MHA. Our accrediting bodies ask that we demonstrate, on a course level, which program competencies are supported and developed through this particular course. Some competencies are given more attention in the course activities and materials. The subsections below indicate to what extent each competency is addressed in the course materials, activities, and evaluation process.\nMPH in Health Policy Program Competencies\n\n\n\n\n\n\n\n\nCompetency\nDegree Covered\nLearning Objectives\n\n\n\n\nAnalyze the influence of policy mechanisms on patient and provider behavior and health systems outcomes.\nP\n1,3,5,6,7\n\n\nAssess health systems performance and issues of quality, access, and efficiency.\nR\n1,2,3,5,6,7\n\n\nCritique health policy literature.\nR\n4\n\n\nCommunicate health policy issues written and orally.\nP\n2,3,4\n\n\n\nMHA Program Competencies\n\n\n\n\n\n\n\n\nCompetency\nDegree Covered\nLearning Objectives\n\n\n\n\nSpeak and write in a clear, concise, and logical manner in formal and informal situations within health care settings to convey cogent business presentations and to facilitate a group. (Effective Communication)\nR\n2,4\n\n\nConsider the business, demographic, ethno-cultural, political, and regulatory factors in developing strategies that continually improve the long-term success and viability of health care organizations. (Strategic Management)\nR\n1,3,5\n\n\nDeconstruct complex problems into smaller elements and synthesize that with other data to derive recommendations. (Critical Thinking and Analysis)\nP\n6,7\n\n\n\n Rating Scale for Degree of Coverage: P = primary, R = reinforcing  \nCompetency Map\n\n\n\n\n\n\n\n\n\nLearning Objective\nProgram Competency\nLearning Activity\nPrimary Assessment\n\n\n\n\nExhibit a conceptual understanding of the forces and factors accounting for legislation and regulation pertaining to health services.\nMPH in HP – Competency 1  MHA – Strategic Management\nLectures\nExams\n\n\nDevelop a framework to critically discuss and evaluate whether the “market” in health services is or is not a policy issue.\nMPH in HP – Competency 1\nLectures  Group Presentations\nExams\n\n\nCompare and contrast the public policy objectives of Medicare, Medicaid, and the private insurance sector with the realities of the political process.\nMPH in HP – Competency 2  MHA – Critical Thinking\nLectures  Group Presentations\nExams  Policy Memo\n\n\nCritically evaluate the research literature that examines the federal and state roles in health services.\nMPH in HP – Competency 3\nWriting Workshops\nPolicy Memo\n\n\nEvaluate current proposals advanced in Congress and by the private sector that impact health services delivery.\nMPH in HP – Competency 1  MHA – Strategic Management\nGroup Presentations\nExams\n\n\nDemonstrate a working understanding of private insurance and the federal and state regulation that oversees it.\nMPH in HP – Competency 1  MHA – Strategic Management\nLectures\nExams\n\n\nExamine the development and regulation of the private insurance market over the past 20 years.\nMPH in HP – Competency 1\nLectures\nExams"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "The detailed course schedule for the semester is below. Please note that dates and topics are subject to change and will depend on the pace of the course. Please stay apprised of any changes announced in class. You can find the materials for each course meeting under the “materials” links for that week in the schedule below. You should generally:\n\nwatch the lecture videos (if any) and complete the readings before the assigned class period\nsubmit any reading discussion questions, problem sets, or other assignments by 1pm on the assigned due date\n\nHere’s a guide to the schedule:\n\nMaterials (): This page contains the readings, slides, and videos (if any) for the topic. Do the readings and watch the videos before coming to class on the indicated date. Slides will typically be posted before each class.\nTutorial (): A link to the tutorial for that week (if any). **Note that we will complete tutorials in class - these are NOT homework.\nAssignment (): This page contains the instructions for each assignment. Assignments are due by 1:00 PM on the day they’re listed.\n\n\n\n\n\n\nDate\n\n\nTopic\n\n\nMaterials\n\n\nTutorial\n\n\nAssignment\n\n\n\n\n\n\nWeek 1\n\n\n\n\nJanuary 16\n\n\nCourse Introduction (Zoom Pass=941414)\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 18\n\n\nU.S. Health Policy Landscape (Zoom Pass=941414)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 2\n\n\n\n\nJanuary 23\n\n\nPolicy Analysis Overview (Zoom Pass=941414)\n\n\n\n\n\n\n\n\n\n\n\n\n\nJanuary 25\n\n\nPolicy Analysis Overview (Zoom Pass=941414)\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 3\n\n\n\n\nJanuary 30\n\n\nIntro to Computing Resources\n\n\n\n\n\n\n\n\n\n\n\n\n\nFebruary 1\n\n\nComputing Resources Lab\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 4\n\n\n\n\nFebruary 6\n\n\nImporting Data\n\n\n\n\n\n\n\n\n\n\n\n\n\nFebruary 8\n\n\nImporting Data Lab\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 5\n\n\n\n\nFebruary 13\n\n\nNo Class - Mardi Gras!\n\n\n\n\n\n\n\n\n\n\n\n\n\nFebruary 15\n\n\nPerspectives on Federal Health Policy - Guest Speaker: Chip Kahn\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 6\n\n\n\n\nFebruary 20\n\n\nSummarizing Data\n\n\n\n\n\n\n\n\n\n\n\n\n\nFebruary 22\n\n\nSummarizing Data Lab\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 7\n\n\n\n\nFebruary 27\n\n\nSummarizing Data\n\n\n\n\n\n\n\n\n\n\n\n\n\nFebruary 29\n\n\nSummarizing Data Lab\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 8\n\n\n\n\nMarch 5\n\n\nData Visualization\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarch 7\n\n\nData Visualization Lab\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 9\n\n\n\n\nMarch 12\n\n\nResearch Design - Randomization and Regression\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarch 14\n\n\nResearch Design - Randomization and Regression\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 10\n\n\n\n\nMarch 19\n\n\nResearch Design - Natural Experiments\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarch 21\n\n\nResearch Design - Natural Experiments\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 11\n\n\n\n\nMarch 26\n\n\nNo Class - Spring Break\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarch 28\n\n\nNo Class - Spring Break\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 12\n\n\n\n\nApril 2\n\n\nResearch Design - Quasi-Experimental Designs\n\n\n\n\n\n\n\n\n\n\n\n\n\nApril 4\n\n\nResearch Design - Quasi-Experimental Designs\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 13\n\n\n\n\nApril 9\n\n\nNo Class\n\n\n\n\n\n\n\n\n\n\n\n\n\nApril 11\n\n\nNo Class\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 14\n\n\n\n\nApril 16\n\n\nPractice Case Study\n\n\n\n\n\n\n\n\n\n\n\n\n\nApril 18\n\n\nPractice Case Study\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 15\n\n\n\n\nApril 23\n\n\nDC Experience\n\n\n\n\n\n\n\n\n\n\n\n\n\nApril 25\n\n\nDC Experience\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek 16\n\n\n\n\nApril 30\n\n\nCase Presentations"
  },
  {
    "objectID": "resources/study-halls.html",
    "href": "resources/study-halls.html",
    "title": "Study Hall Schedule",
    "section": "",
    "text": "For the latest schedule, including changes to the schedule, please check Ed or the Gov 50 Google calendar.\n\n\n\n\n\nName\n\n\nday\n\n\nStart Time\n\n\nEnd Time\n\n\nLocation\n\n\n\n\n\n\nKate De Groote\n\n\nFriday\n\n\n1:00 PM\n\n\n3:00 PM\n\n\nLowell Dining Hall\n\n\n\n\nIsa Peña\n\n\nFriday\n\n\n2:00 PM\n\n\n4:00 PM\n\n\nCabot Dining Hall\n\n\n\n\nJulia Poulson\n\n\nFriday\n\n\n4:00 PM\n\n\n6:00 PM\n\n\nPfoho Dining Hall\n\n\n\n\nEric Forteza\n\n\nSunday\n\n\n5:00 PM\n\n\n7:00 PM\n\n\nCabot Dining Hall\n\n\n\n\nGowri Rangu\n\n\nSunday\n\n\n7:30 PM\n\n\n9:30 PM\n\n\nLowell Dining Hall\n\n\n\n\nMitja Bof\n\n\nSunday\n\n\n8:00 PM\n\n\n10:00 PM\n\n\nWinthrop Dining Hall\n\n\n\n\nJason Wang\n\n\nSunday\n\n\n8:00 PM\n\n\n10:00 PM\n\n\nLeverett Dining Hall\n\n\n\n\nIsa Peña\n\n\nMonday\n\n\n8:00 AM\n\n\n10:00 AM\n\n\nCabot Dining Hall\n\n\n\n\nRyan McCarthy\n\n\nMonday\n\n\n9:00 AM\n\n\n11:00 AM\n\n\nEliot Dining Hall\n\n\n\n\nAlex Heuss\n\n\nMonday\n\n\n4:30 PM\n\n\n6:30 PM\n\n\nCGIS Cafe\n\n\n\n\nFrank T Berrios\n\n\nMonday\n\n\n5:00 PM\n\n\n7:00 PM\n\n\nCabot Dining Hall\n\n\n\n\nChris Mesfin\n\n\nMonday\n\n\n7:00 PM\n\n\n9:00 PM\n\n\nPfoho Dining Hall\n\n\n\n\nAzeez Richardson\n\n\nMonday\n\n\n7:00 PM\n\n\n9:00 PM\n\n\nDunster Dining Hall\n\n\n\n\nVivian Nguyen\n\n\nMonday\n\n\n8:00 PM\n\n\n10:00 PM\n\n\nMather Dining Hall\n\n\n\n\nAlina Esanu\n\n\nTuesday\n\n\n9:00 AM\n\n\n11:00 AM\n\n\nQuincy Dining Hall\n\n\n\n\nZachary Mecca\n\n\nTuesday\n\n\n9:30 AM\n\n\n11:30 AM\n\n\nEliot Dining Hall\n\n\n\n\nTracy Jiang\n\n\nTuesday\n\n\n3:00 PM\n\n\n5:00 PM\n\n\nAdam Dining Hall\n\n\n\n\nCameron Snowden\n\n\nTuesday\n\n\n4:00 PM\n\n\n6:00 PM\n\n\nPfoho Dining Hall\n\n\n\n\nGroup Study Hall\n\n\nTuesday\n\n\n6:00 PM\n\n\n11:00 PM\n\n\nCGIS Cafe (First Floor)\n\n\n\n\nGowri Rangu\n\n\nWednesday\n\n\n2:00 PM\n\n\n4:00 PM\n\n\nLowell Dining Hall\n\n\n\n\nGroup Study Hall\n\n\nWednesday\n\n\n6:00 PM\n\n\n11:00 PM\n\n\nCGIS Cafe (First Floor)"
  },
  {
    "objectID": "resources/office-hours.html",
    "href": "resources/office-hours.html",
    "title": "Office House Schedule",
    "section": "",
    "text": "For the latest schedule, including changes to the schedule, please check Ed or the Gov 50 Google calendar.\n\n\n\n\n\nName\n\n\nDay\n\n\nStart Time\n\n\nEnd Time\n\n\nLocation\n\n\n\n\n\n\nAhmet Akbiyik\n\n\nThursday\n\n\n7:00 PM\n\n\n8:00 PM\n\n\nDunster House Dining Hall\n\n\n\n\nAda Cruz\n\n\nFriday\n\n\n10:00 AM\n\n\n12:00 PM\n\n\nEliot Dhall\n\n\n\n\nEthan Miles\n\n\nFriday\n\n\n2:00 PM\n\n\n3:00 PM\n\n\nCGIS K Café\n\n\n\n\nJerry Min\n\n\nFriday\n\n\n5:00:00 PM\n\n\n6:00 PM\n\n\nCGIS K Café\n\n\n\n\nShriya Yarlagadda\n\n\nSunday\n\n\n8:00 PM\n\n\n9:00 PM\n\n\nLowell DHall\n\n\n\n\nAndy Wang\n\n\nMonday\n\n\n3:00 PM\n\n\n4:00 PM\n\n\nFairfax Common Room\n\n\n\n\nKatherine Jackson\n\n\nMonday\n\n\n5:00 PM\n\n\n7:00 PM\n\n\nPfoho Dhall - 2nd Floor\n\n\n\n\nJulio Solis\n\n\nTuesday\n\n\n1:15 PM\n\n\n2:15 PM\n\n\nEmerson Hall\n\n\n\n\nJames Jolin\n\n\nTuesday\n\n\n4:00 PM\n\n\n5:00 PM\n\n\nCGIS K Café\n\n\n\n\nPranav Moudgalya\n\n\nTuesday\n\n\n8:00 PM\n\n\n9:00 PM\n\n\nLeverett Dining Hall\n\n\n\n\nChris Shen\n\n\nWednesday\n\n\n9:00 PM\n\n\n10:00 PM\n\n\nQuincy Dining Hall"
  },
  {
    "objectID": "resources/cheatsheet.html",
    "href": "resources/cheatsheet.html",
    "title": "R Programming Cheat Sheet",
    "section": "",
    "text": "You will need to load the following libraries in RStudio before attempting some of the techniques in this tutorial.\nlibrary(tidyverse)\ninstall.packages(\"nycflights13\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading nycflights13 from CRAN ...        OK [4.3 Mb in 0.44s]\nSuccessfully downloaded 1 package in 1.2 seconds.\n\nThe following package(s) will be installed:\n- nycflights13 [1.0.2]\nThese packages will be installed into \"~/work/hpam7660-sp24/hpam7660-sp24/renv/library/R-4.3/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing nycflights13 ...                   OK [built from source and cached in 9.0s]\nSuccessfully installed 1 package in 9.1 seconds.\n\nlibrary(nycflights13)\ninstall.packages(\"gapminder\")\n\n# Downloading packages -------------------------------------------------------\n- Downloading gapminder from CRAN ...           OK [2.1 Mb in 0.24s]\nSuccessfully downloaded 1 package in 0.47 seconds.\n\nThe following package(s) will be installed:\n- gapminder [1.0.0]\nThese packages will be installed into \"~/work/hpam7660-sp24/hpam7660-sp24/renv/library/R-4.3/x86_64-pc-linux-gnu\".\n\n# Installing packages --------------------------------------------------------\n- Installing gapminder ...                      OK [built from source and cached in 2.0s]\nSuccessfully installed 1 package in 2.1 seconds.\n\nlibrary(gapminder)"
  },
  {
    "objectID": "resources/cheatsheet.html#r-basics",
    "href": "resources/cheatsheet.html#r-basics",
    "title": "R Programming Cheat Sheet",
    "section": "R Basics",
    "text": "R Basics\n\nCreating a vector\nYou can create a vector using the c function:\n\n## Any R code that begins with the # character is a comment\n## Comments are ignored by R\n\nmy_numbers &lt;- c(4, 8, 15, 16, 23, 42) # Anything after # is also a\n# comment\nmy_numbers\n\n[1]  4  8 15 16 23 42\n\n\n\n\nInstalling and loading a package\nYou can install a package with the install.packages function, passing the name of the package to be installed as a string (that is, in quotes):\n\ninstall.packages(\"ggplot2\")\n\nYou can load a package into the R environment by calling library() with the name of package without quotes. You should only have one package per library call.\n\nlibrary(ggplot2)\n\n\n\nCalling functions from specific packages\nWe can also use the mypackage:: prefix to access package functions without loading:\n\nknitr::kable(head(mtcars))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1"
  },
  {
    "objectID": "resources/cheatsheet.html#data-visualization",
    "href": "resources/cheatsheet.html#data-visualization",
    "title": "R Programming Cheat Sheet",
    "section": "Data Visualization",
    "text": "Data Visualization\n\nScatter plot\nYou can produce a scatter plot with using the x and y aesthetics along with the geom_point() function.\n\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point()\n\n\n\n\n\n\nSmoothed curves\nYou can add a smoothed curve that summarizes the relationship between two variables with the geom_smooth() function. By default, it uses a loess smoother to estimated the conditional mean of the y-axis variable as a function of the x-axis variable.\n\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() + geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\nAdding a regression line\ngeom_smooth can also add a regression line by setting the argument method = \"lm\" and we can turn off the shaded regions around the line with se = FALSE\n\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() + geom_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nChanging the scale of the axes\nIf we want the scale of the x-axis to be logged to stretch out the data we can use the scale_x_log10():\n\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_x_log10()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nAdding informative labels to a plot\nUse the labs() to add informative labels to the plot:\n\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  scale_x_log10() +\n  labs(x = \"Population Density\",\n       y = \"Percent of County Below Poverty Line\",\n       title = \"Poverty and Population Density\",\n       subtitle = \"Among Counties in the Midwest\",\n       source = \"US Census, 2000\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nMapping aesthetics to variables\nIf you would like to map an aesthetic to a variable for all geoms in the plot, you can put it in the aes call in the ggplot() function:\n\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty,\n                     color = state,\n                     fill = state)) +\n  geom_point() +\n  geom_smooth() +\n  scale_x_log10()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\nMapping aesthetics for a single geom\nYou can also map aesthetics for a specific geom using the mapping argument to that function:\n\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point(mapping = aes(color = state)) +\n  geom_smooth(color = \"black\") +\n  scale_x_log10()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\nSetting the aesthetics for all observations\nIf you would like to set the color or size or shape of a geom for all data points (that is, not mapped to any variables), be sure to set these outside of aes():\n\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point(color = \"purple\") +\n  geom_smooth() +\n  scale_x_log10()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\nHistograms\n\nggplot(data = midwest,\n       mapping = aes(x = percbelowpoverty)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "resources/cheatsheet.html#data-wrangling",
    "href": "resources/cheatsheet.html#data-wrangling",
    "title": "R Programming Cheat Sheet",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nSubsetting a data frame\nUse the filter() function from the dplyr package to subset a data frame. In this example, you’ll use the nycflights13 data and filter by United Airlines flights.\n\nlibrary(nycflights13)\n\nflights |&gt; filter(carrier == \"UA\")\n\n# A tibble: 58,665 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      554            558        -4      740            728\n 4  2013     1     1      558            600        -2      924            917\n 5  2013     1     1      558            600        -2      923            937\n 6  2013     1     1      559            600        -1      854            902\n 7  2013     1     1      607            607         0      858            915\n 8  2013     1     1      611            600        11      945            931\n 9  2013     1     1      623            627        -4      933            932\n10  2013     1     1      628            630        -2     1016            947\n# ℹ 58,655 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nYou can filter based on multiple conditions to subset to the rows that meet all conditions:\n\nflights |&gt; filter(carrier == \"UA\", origin == \"JFK\")\n\n# A tibble: 4,534 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      558            600        -2      924            917\n 2  2013     1     1      611            600        11      945            931\n 3  2013     1     1      803            800         3     1132           1144\n 4  2013     1     1      829            830        -1     1152           1200\n 5  2013     1     1     1112           1100        12     1440           1438\n 6  2013     1     1     1127           1130        -3     1504           1448\n 7  2013     1     1     1422           1425        -3     1748           1759\n 8  2013     1     1     1522           1530        -8     1858           1855\n 9  2013     1     1     1726           1729        -3     2042           2100\n10  2013     1     1     1750           1750         0     2109           2115\n# ℹ 4,524 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nYou can use the | operator to match one of two conditions (“OR” rather than “AND”):\n\n  flights |&gt; filter(carrier == \"UA\" | carrier == \"AA\")\n\n# A tibble: 91,394 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      558            600        -2      753            745\n 6  2013     1     1      558            600        -2      924            917\n 7  2013     1     1      558            600        -2      923            937\n 8  2013     1     1      559            600        -1      941            910\n 9  2013     1     1      559            600        -1      854            902\n10  2013     1     1      606            610        -4      858            910\n# ℹ 91,384 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nTo test if a variable is one of several possible values, you can also use the %in% command:\n\nflights |&gt; filter(carrier %in% c(\"UA\", \"AA\"))\n\n# A tibble: 91,394 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      554            558        -4      740            728\n 5  2013     1     1      558            600        -2      753            745\n 6  2013     1     1      558            600        -2      924            917\n 7  2013     1     1      558            600        -2      923            937\n 8  2013     1     1      559            600        -1      941            910\n 9  2013     1     1      559            600        -1      854            902\n10  2013     1     1      606            610        -4      858            910\n# ℹ 91,384 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nIf you want to subset to a set of specific row numbers, you can use the slice function:\n\n## subset to the first 5 rows\nflights |&gt; slice(1:5)\n\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nHere the 1:5 syntax tells R to produce a vector that starts at 1 and ends at 5, incrementing by 1:\n\n1:5\n\n[1] 1 2 3 4 5\n\n\n\n\nFiltering to the largest/smallest values of a variable\nTo subset to the rows that have the largest or smallest values of a given variable, use the slice_max and slice_max functions. For the largest values, use slice_max and use the n argument to specify how many rows you want:\n\nflights |&gt; slice_max(dep_time, n = 5)\n\n# A tibble: 29 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013    10    30     2400           2359         1      327            337\n 2  2013    11    27     2400           2359         1      515            445\n 3  2013    12     5     2400           2359         1      427            440\n 4  2013    12     9     2400           2359         1      432            440\n 5  2013    12     9     2400           2250        70       59           2356\n 6  2013    12    13     2400           2359         1      432            440\n 7  2013    12    19     2400           2359         1      434            440\n 8  2013    12    29     2400           1700       420      302           2025\n 9  2013     2     7     2400           2359         1      432            436\n10  2013     2     7     2400           2359         1      443            444\n# ℹ 19 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nTo get lowest values, use slice_min:\n\nflights |&gt; slice_min(dep_time, n = 5)\n\n# A tibble: 25 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1    13        1           2249        72      108           2357\n 2  2013     1    31        1           2100       181      124           2225\n 3  2013    11    13        1           2359         2      442            440\n 4  2013    12    16        1           2359         2      447            437\n 5  2013    12    20        1           2359         2      430            440\n 6  2013    12    26        1           2359         2      437            440\n 7  2013    12    30        1           2359         2      441            437\n 8  2013     2    11        1           2100       181      111           2225\n 9  2013     2    24        1           2245        76      121           2354\n10  2013     3     8        1           2355         6      431            440\n# ℹ 15 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nSorting rows by a variable\nYou can sort the rows of a data set using the arrange() function. By default, this will sort the rows from smallest to largest.\n\nflights |&gt; arrange(dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1    13        1           2249        72      108           2357\n 2  2013     1    31        1           2100       181      124           2225\n 3  2013    11    13        1           2359         2      442            440\n 4  2013    12    16        1           2359         2      447            437\n 5  2013    12    20        1           2359         2      430            440\n 6  2013    12    26        1           2359         2      437            440\n 7  2013    12    30        1           2359         2      441            437\n 8  2013     2    11        1           2100       181      111           2225\n 9  2013     2    24        1           2245        76      121           2354\n10  2013     3     8        1           2355         6      431            440\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nIf you would like to sort the rows from largest to smallest (descending order), you can wrap the variable name with desc():\n\nflights |&gt; arrange(desc(dep_time))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013    10    30     2400           2359         1      327            337\n 2  2013    11    27     2400           2359         1      515            445\n 3  2013    12     5     2400           2359         1      427            440\n 4  2013    12     9     2400           2359         1      432            440\n 5  2013    12     9     2400           2250        70       59           2356\n 6  2013    12    13     2400           2359         1      432            440\n 7  2013    12    19     2400           2359         1      434            440\n 8  2013    12    29     2400           1700       420      302           2025\n 9  2013     2     7     2400           2359         1      432            436\n10  2013     2     7     2400           2359         1      443            444\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nSelecting/subsetting the columns\nYou can subset the data to only certain columns using the select() command:\n\nflights |&gt; select(dep_time, arr_time, dest)\n\n# A tibble: 336,776 × 3\n   dep_time arr_time dest \n      &lt;int&gt;    &lt;int&gt; &lt;chr&gt;\n 1      517      830 IAH  \n 2      533      850 IAH  \n 3      542      923 MIA  \n 4      544     1004 BQN  \n 5      554      812 ATL  \n 6      554      740 ORD  \n 7      555      913 FLL  \n 8      557      709 IAD  \n 9      557      838 MCO  \n10      558      753 ORD  \n# ℹ 336,766 more rows\n\n\nIf you want to select a range of columns from, say, callsign to ideology, you can use the : operator:\n\nflights |&gt; select(dep_time:arr_delay)\n\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1      517            515         2      830            819        11\n 2      533            529         4      850            830        20\n 3      542            540         2      923            850        33\n 4      544            545        -1     1004           1022       -18\n 5      554            600        -6      812            837       -25\n 6      554            558        -4      740            728        12\n 7      555            600        -5      913            854        19\n 8      557            600        -3      709            723       -14\n 9      557            600        -3      838            846        -8\n10      558            600        -2      753            745         8\n# ℹ 336,766 more rows\n\n\nYou can remove a variable from the data set by using the minus sign - in front of it:\n\nflights |&gt; select(-year)\n\n# A tibble: 336,776 × 18\n   month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1     1     1      517            515         2      830            819\n 2     1     1      533            529         4      850            830\n 3     1     1      542            540         2      923            850\n 4     1     1      544            545        -1     1004           1022\n 5     1     1      554            600        -6      812            837\n 6     1     1      554            558        -4      740            728\n 7     1     1      555            600        -5      913            854\n 8     1     1      557            600        -3      709            723\n 9     1     1      557            600        -3      838            846\n10     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nYou can also drop several variables using the c() function or the (a:b) syntax:\n\nflights |&gt; select(-c(year, month, day))\n\n# A tibble: 336,776 × 16\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1      517            515         2      830            819        11 UA     \n 2      533            529         4      850            830        20 UA     \n 3      542            540         2      923            850        33 AA     \n 4      544            545        -1     1004           1022       -18 B6     \n 5      554            600        -6      812            837       -25 DL     \n 6      554            558        -4      740            728        12 UA     \n 7      555            600        -5      913            854        19 B6     \n 8      557            600        -3      709            723       -14 EV     \n 9      557            600        -3      838            846        -8 B6     \n10      558            600        -2      753            745         8 AA     \n# ℹ 336,766 more rows\n# ℹ 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;,\n#   air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\nflights |&gt; select(-(year:day))\n\n# A tibble: 336,776 × 16\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier\n      &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1      517            515         2      830            819        11 UA     \n 2      533            529         4      850            830        20 UA     \n 3      542            540         2      923            850        33 AA     \n 4      544            545        -1     1004           1022       -18 B6     \n 5      554            600        -6      812            837       -25 DL     \n 6      554            558        -4      740            728        12 UA     \n 7      555            600        -5      913            854        19 B6     \n 8      557            600        -3      709            723       -14 EV     \n 9      557            600        -3      838            846        -8 B6     \n10      558            600        -2      753            745         8 AA     \n# ℹ 336,766 more rows\n# ℹ 9 more variables: flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;,\n#   air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\nYou can also select columns based on matching patterns in the names with functions like starts_with() or ends_with():\n\nflights |&gt; select(ends_with(\"delay\"))\n\n# A tibble: 336,776 × 2\n   dep_delay arr_delay\n       &lt;dbl&gt;     &lt;dbl&gt;\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# ℹ 336,766 more rows\n\n\nThis code finds all variables with column names that end with the string “delay”. See the help page for select() for more information on different ways to select.\n\n\nRenaming a variable\nYou can rename a variable useing the function rename(new_name = old_name):\n\nflights |&gt; rename(flight_number = flight)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight_number &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nCreating new variables\nYou can create new variables that are functions of old variables using the mutate() function:\n\nflights |&gt; mutate(flight_length = arr_time - dep_time) |&gt; select(arr_time, dep_time, flight_length)\n\n# A tibble: 336,776 × 3\n   arr_time dep_time flight_length\n      &lt;int&gt;    &lt;int&gt;         &lt;int&gt;\n 1      830      517           313\n 2      850      533           317\n 3      923      542           381\n 4     1004      544           460\n 5      812      554           258\n 6      740      554           186\n 7      913      555           358\n 8      709      557           152\n 9      838      557           281\n10      753      558           195\n# ℹ 336,766 more rows\n\n\n\n\nCreating new variables based on yes/no conditions\nIf you want to create a new variable that can take on two values based on a logical conditional, you should use the if_else() function inside of mutate(). For instance, if we want to create a more nicely labeled version of the sinclair2017 variable (which is 0/1), we could do:\n\nflights |&gt;\n  mutate(late = if_else(arr_delay &gt; 0,\n                             \"Flight Delayed\",\n                             \"Flight On Time\")) |&gt;\n  select(arr_delay, late)\n\n# A tibble: 336,776 × 2\n   arr_delay late          \n       &lt;dbl&gt; &lt;chr&gt;         \n 1        11 Flight Delayed\n 2        20 Flight Delayed\n 3        33 Flight Delayed\n 4       -18 Flight On Time\n 5       -25 Flight On Time\n 6        12 Flight Delayed\n 7        19 Flight Delayed\n 8       -14 Flight On Time\n 9        -8 Flight On Time\n10         8 Flight Delayed\n# ℹ 336,766 more rows\n\n\n\n\nSummarizing a variable\nYou can calculate summaries of variables in the data set using the summarize() function.\n\nflights |&gt;\n  summarize(\n    avg_dep_time = mean(dep_time),\n    sd_dep_time = sd(dep_time),\n    median_dep_time = median(dep_time)\n  )\n\n# A tibble: 1 × 3\n  avg_dep_time sd_dep_time median_dep_time\n         &lt;dbl&gt;       &lt;dbl&gt;           &lt;int&gt;\n1           NA          NA              NA\n\n\n\n\nSummarizing variables by groups of rows\nBy default, summarize() calculates the summaries of variables for all rows in the data frame. You can also calculate these summaries within groups of rows defined by another variable in the data frame using the group_by() function before summarizing.\n\nflights |&gt;\n  group_by(carrier) |&gt;\n  summarize(\n    avg_dep_time = mean(dep_time),\n    sd_dep_time = sd(dep_time),\n    median_dep_time = median(dep_time)\n  )\n\n# A tibble: 16 × 4\n   carrier avg_dep_time sd_dep_time median_dep_time\n   &lt;chr&gt;          &lt;dbl&gt;       &lt;dbl&gt;           &lt;dbl&gt;\n 1 9E               NA         NA                NA\n 2 AA               NA         NA                NA\n 3 AS               NA         NA                NA\n 4 B6               NA         NA                NA\n 5 DL               NA         NA                NA\n 6 EV               NA         NA                NA\n 7 F9               NA         NA                NA\n 8 FL               NA         NA                NA\n 9 HA              949.        53.6             954\n10 MQ               NA         NA                NA\n11 OO               NA         NA                NA\n12 UA               NA         NA                NA\n13 US               NA         NA                NA\n14 VX               NA         NA                NA\n15 WN               NA         NA                NA\n16 YV               NA         NA                NA\n\n\nHere, the summarize() function breaks apart the original data into smaller data frames for each carrier and applies the summary functions to those, then combines everything into one tibble.\n\n\nSummarizing by multiple variables\nYou can group by multiple variables and summarize() will create groups based on every combination of each variable:\n\nflights |&gt;\n  group_by(carrier, month) |&gt;\n  summarize(\n    avg_dep_time = mean(dep_time)\n  )\n\n`summarise()` has grouped output by 'carrier'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 185 × 3\n# Groups:   carrier [16]\n   carrier month avg_dep_time\n   &lt;chr&gt;   &lt;int&gt;        &lt;dbl&gt;\n 1 9E          1           NA\n 2 9E          2           NA\n 3 9E          3           NA\n 4 9E          4           NA\n 5 9E          5           NA\n 6 9E          6           NA\n 7 9E          7           NA\n 8 9E          8           NA\n 9 9E          9           NA\n10 9E         10           NA\n# ℹ 175 more rows\n\n\nYou’ll notice the message that summarize() sends after using to let us know that resulting tibble is grouped by carrier. By default, summarize() drops the last group you provided in group_by (month in this case). This isn’t an error message, it’s just letting us know some helpful information. If you want to avoid this messaging displaying, you need to specify what grouping you want after using the .groups argument:\n\nflights |&gt;\n  group_by(carrier, month) |&gt;\n  summarize(\n    avg_dep_time = mean(dep_time),\n    .groups = \"drop_last\"\n  )\n\n# A tibble: 185 × 3\n# Groups:   carrier [16]\n   carrier month avg_dep_time\n   &lt;chr&gt;   &lt;int&gt;        &lt;dbl&gt;\n 1 9E          1           NA\n 2 9E          2           NA\n 3 9E          3           NA\n 4 9E          4           NA\n 5 9E          5           NA\n 6 9E          6           NA\n 7 9E          7           NA\n 8 9E          8           NA\n 9 9E          9           NA\n10 9E         10           NA\n# ℹ 175 more rows\n\n\n\n\nSummarizing across many variables\nIf you want to apply the same summary to multiple variables, you can use the across(vars, fun) function, where vars is a vector of variable names (specified like with select()) and fun is a summary function to apply to those variables.\n\nflights |&gt;\n  group_by(carrier, month) |&gt;\n  summarize(\n    across(c(dep_time, dep_delay), mean)\n  )\n\n`summarise()` has grouped output by 'carrier'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 185 × 4\n# Groups:   carrier [16]\n   carrier month dep_time dep_delay\n   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 9E          1       NA        NA\n 2 9E          2       NA        NA\n 3 9E          3       NA        NA\n 4 9E          4       NA        NA\n 5 9E          5       NA        NA\n 6 9E          6       NA        NA\n 7 9E          7       NA        NA\n 8 9E          8       NA        NA\n 9 9E          9       NA        NA\n10 9E         10       NA        NA\n# ℹ 175 more rows\n\n\nAs with select(), you can use the : operator to select a range of variables\n\nflights |&gt;\n  group_by(carrier, month) |&gt;\n  summarize(\n    across(dep_time:arr_delay, mean)\n  )\n\n`summarise()` has grouped output by 'carrier'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 185 × 8\n# Groups:   carrier [16]\n   carrier month dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;chr&gt;   &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;\n 1 9E          1       NA          1485.        NA       NA          1676.\n 2 9E          2       NA          1471.        NA       NA          1661.\n 3 9E          3       NA          1472.        NA       NA          1664.\n 4 9E          4       NA          1502.        NA       NA          1697.\n 5 9E          5       NA          1509.        NA       NA          1712.\n 6 9E          6       NA          1512.        NA       NA          1718.\n 7 9E          7       NA          1493.        NA       NA          1702.\n 8 9E          8       NA          1497.        NA       NA          1706.\n 9 9E          9       NA          1458.        NA       NA          1658.\n10 9E         10       NA          1432.        NA       NA          1632.\n# ℹ 175 more rows\n# ℹ 1 more variable: arr_delay &lt;dbl&gt;\n\n\n\n\nTable of counts of a categorical variable\nThere are two way to produce a table of counts of each category of a variable. The first is to use group_by and summarize along with the summary function n(), which returns the numbers of rows in each grouping (that is, each combination of the grouping variables):\n\nflights |&gt;\n  group_by(carrier) |&gt;\n  summarize(n = n())\n\n# A tibble: 16 × 2\n   carrier     n\n   &lt;chr&gt;   &lt;int&gt;\n 1 9E      18460\n 2 AA      32729\n 3 AS        714\n 4 B6      54635\n 5 DL      48110\n 6 EV      54173\n 7 F9        685\n 8 FL       3260\n 9 HA        342\n10 MQ      26397\n11 OO         32\n12 UA      58665\n13 US      20536\n14 VX       5162\n15 WN      12275\n16 YV        601\n\n\nA simpler way to acheive the same outcome is to use the count() function, which implements these two steps:\n\nflights |&gt; count(carrier)\n\n# A tibble: 16 × 2\n   carrier     n\n   &lt;chr&gt;   &lt;int&gt;\n 1 9E      18460\n 2 AA      32729\n 3 AS        714\n 4 B6      54635\n 5 DL      48110\n 6 EV      54173\n 7 F9        685\n 8 FL       3260\n 9 HA        342\n10 MQ      26397\n11 OO         32\n12 UA      58665\n13 US      20536\n14 VX       5162\n15 WN      12275\n16 YV        601\n\n\n\n\nProducing nicely formatted tables with kable()\nYou can take any tibble in R and convert it into a more readable output by passing it to knitr::kable(). In our homework, generally, we will save the tibble as an object and then pass it to this function.\n\nmonth_summary &lt;- flights |&gt;\n  group_by(month) |&gt;\n  summarize(\n    avg_arr_delay = mean(arr_delay),\n    sd_arr_delay = sd(arr_delay)\n  )\n\nknitr::kable(month_summary)\n\n\n\n\nmonth\navg_arr_delay\nsd_arr_delay\n\n\n\n\n1\nNA\nNA\n\n\n2\nNA\nNA\n\n\n3\nNA\nNA\n\n\n4\nNA\nNA\n\n\n5\nNA\nNA\n\n\n6\nNA\nNA\n\n\n7\nNA\nNA\n\n\n8\nNA\nNA\n\n\n9\nNA\nNA\n\n\n10\nNA\nNA\n\n\n11\nNA\nNA\n\n\n12\nNA\nNA\n\n\n\n\n\nYou can add informative column names to the table using the col.names argument.\n\nknitr::kable(\n  month_summary,\n  col.names = c(\"Month\", \"Average Delay\", \"SD of Delay\")\n)\n\n\n\n\nMonth\nAverage Delay\nSD of Delay\n\n\n\n\n1\nNA\nNA\n\n\n2\nNA\nNA\n\n\n3\nNA\nNA\n\n\n4\nNA\nNA\n\n\n5\nNA\nNA\n\n\n6\nNA\nNA\n\n\n7\nNA\nNA\n\n\n8\nNA\nNA\n\n\n9\nNA\nNA\n\n\n10\nNA\nNA\n\n\n11\nNA\nNA\n\n\n12\nNA\nNA\n\n\n\n\n\nFinally, we can round the numbers in the table to be a bit nicer using the digits argument. This will tell kable() how many significant digits to show.\n\nknitr::kable(\n  month_summary,\n  col.names = c(\"Month\", \"Average Delay\", \"SD of Delay\"),\n  digits = 3\n)\n\n\n\n\nMonth\nAverage Delay\nSD of Delay\n\n\n\n\n1\nNA\nNA\n\n\n2\nNA\nNA\n\n\n3\nNA\nNA\n\n\n4\nNA\nNA\n\n\n5\nNA\nNA\n\n\n6\nNA\nNA\n\n\n7\nNA\nNA\n\n\n8\nNA\nNA\n\n\n9\nNA\nNA\n\n\n10\nNA\nNA\n\n\n11\nNA\nNA\n\n\n12\nNA\nNA\n\n\n\n\n\n\n\nBarplots of counts\nYou can visualize counts of a variable using a barplot:\n\nflights |&gt;\n  ggplot(mapping = aes(x = carrier)) +\n  geom_bar()\n\n\n\n\n\n\nBarplots of other summaries\nWe can use barplots to visualize other grouped summaries like means, but we need to use the geom_col() geom instead and specify the variable you want to be the height of the bars. We also want to filter our data so that only values of arr_delay that are greater than zero are considered.\n\nflights |&gt;\n  filter(arr_delay &gt; 0) |&gt;\n  group_by(carrier) |&gt;\n  summarize(\n    avg_delay = mean(arr_delay)\n  ) |&gt;\n  ggplot(mapping = aes(x = carrier, y = avg_delay)) +\n  geom_col()\n\n\n\n\n\n\nReordering/sorting barplot axes\nOften we want to sort the barplot axes to be in the order of the variable of interest so we can quickly compare them. We can use the fct_reorder(group_var, ordering_var) function to do this where the group_var is the grouping variable that is going on the axes and the ordering_var is the variable that we will sort the groups on.\n\nflights |&gt;\n  filter(arr_delay &gt; 0) |&gt;\n  group_by(carrier) |&gt;\n  summarize(\n    avg_delay = mean(arr_delay)\n  ) |&gt;\n  ggplot(mapping = aes(x = fct_reorder(carrier, avg_delay),\n                       y = avg_delay)) +\n  geom_col()\n\n\n\n\n\n\nColoring barplots by another variable\nYou can color the barplots by a another variable using the fill aesthetic:\n\nflights |&gt;\n  filter(arr_delay &gt; 0) |&gt;\n  group_by(carrier) |&gt;\n  summarize(\n    avg_delay = mean(arr_delay)\n  ) |&gt;\n  slice_max(avg_delay, n = 10) |&gt;\n  ggplot(mapping = aes(y = fct_reorder(carrier, avg_delay),\n                       x = avg_delay)) +\n  geom_col(mapping = aes(fill = carrier))\n\n\n\n\n\n\nCreating logical vectors\nYou can create logical variables in your tibbles using mutate:\n\nflights |&gt;\n  mutate(\n    late = arr_delay &gt; 0,\n    fall = month == 9  | month == 10| month == 11,\n    .keep = \"used\"\n)\n\n# A tibble: 336,776 × 4\n   month arr_delay late  fall \n   &lt;int&gt;     &lt;dbl&gt; &lt;lgl&gt; &lt;lgl&gt;\n 1     1        11 TRUE  FALSE\n 2     1        20 TRUE  FALSE\n 3     1        33 TRUE  FALSE\n 4     1       -18 FALSE FALSE\n 5     1       -25 FALSE FALSE\n 6     1        12 TRUE  FALSE\n 7     1        19 TRUE  FALSE\n 8     1       -14 FALSE FALSE\n 9     1        -8 FALSE FALSE\n10     1         8 TRUE  FALSE\n# ℹ 336,766 more rows\n\n\nThe .keep = \"used\" argument here tells mutate to only return the variables created and any variables used to create them. We’re using it here for display purposes.\nYou can filter based on these logical variables. In particular, if we want to subset to rows where both late and fall were TRUE we could do the following filter:\n\nflights |&gt;\n  mutate(\n    late = arr_delay &gt; 0,\n    fall = month == 9  | month == 10| month == 11,\n    .keep = \"used\"\n  ) |&gt;\n  filter(late & fall)\n\n# A tibble: 26,307 × 4\n   month arr_delay late  fall \n   &lt;int&gt;     &lt;dbl&gt; &lt;lgl&gt; &lt;lgl&gt;\n 1    10        11 TRUE  TRUE \n 2    10        12 TRUE  TRUE \n 3    10         4 TRUE  TRUE \n 4    10        16 TRUE  TRUE \n 5    10         7 TRUE  TRUE \n 6    10         4 TRUE  TRUE \n 7    10         6 TRUE  TRUE \n 8    10         1 TRUE  TRUE \n 9    10         9 TRUE  TRUE \n10    10        83 TRUE  TRUE \n# ℹ 26,297 more rows\n\n\n\n\nUsing ! to negate logicals\nAny time you place the exclamation point in front of a logical, it will turn any TRUE into a FALSE and vice versa. For instance, if we wanted on-time flights in the fall, we could used\n\nflights |&gt;\n  mutate(\n    late = arr_delay &gt; 0,\n    fall = month == 9  | month == 10| month == 11,\n    .keep = \"used\"\n  ) |&gt;\n  filter(!late & fall)\n\n# A tibble: 56,292 × 4\n   month arr_delay late  fall \n   &lt;int&gt;     &lt;dbl&gt; &lt;lgl&gt; &lt;lgl&gt;\n 1    10       -34 FALSE TRUE \n 2    10       -22 FALSE TRUE \n 3    10       -46 FALSE TRUE \n 4    10       -26 FALSE TRUE \n 5    10       -16 FALSE TRUE \n 6    10       -20 FALSE TRUE \n 7    10       -23 FALSE TRUE \n 8    10       -12 FALSE TRUE \n 9    10       -10 FALSE TRUE \n10    10        -3 FALSE TRUE \n# ℹ 56,282 more rows\n\n\nOr if we wanted to subset to any combination except late flights and fall, we could negate the AND statement using parentheses:\n\nflights |&gt;\n  mutate(\n    late = arr_delay &gt; 0,\n    fall = month == 9  | month == 10| month == 11,\n    .keep = \"used\"\n  ) |&gt;\n  filter(!(late & fall))\n\n# A tibble: 309,337 × 4\n   month arr_delay late  fall \n   &lt;int&gt;     &lt;dbl&gt; &lt;lgl&gt; &lt;lgl&gt;\n 1     1        11 TRUE  FALSE\n 2     1        20 TRUE  FALSE\n 3     1        33 TRUE  FALSE\n 4     1       -18 FALSE FALSE\n 5     1       -25 FALSE FALSE\n 6     1        12 TRUE  FALSE\n 7     1        19 TRUE  FALSE\n 8     1       -14 FALSE FALSE\n 9     1        -8 FALSE FALSE\n10     1         8 TRUE  FALSE\n# ℹ 309,327 more rows\n\n\nThis is often used in combination with %in% to acheive a “not in” logical:\n\nflights |&gt;\n  filter(!(carrier %in% c(\"AA\", \"UA\")))\n\n# A tibble: 245,382 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      544            545        -1     1004           1022\n 2  2013     1     1      554            600        -6      812            837\n 3  2013     1     1      555            600        -5      913            854\n 4  2013     1     1      557            600        -3      709            723\n 5  2013     1     1      557            600        -3      838            846\n 6  2013     1     1      558            600        -2      849            851\n 7  2013     1     1      558            600        -2      853            856\n 8  2013     1     1      559            559         0      702            706\n 9  2013     1     1      600            600         0      851            858\n10  2013     1     1      600            600         0      837            825\n# ℹ 245,372 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\nGrouped summaries with any() and all()\nOnce you group a tibble, you can summarize logicals within groups using two commands. any() will return TRUE if a logical is TRUE for any row in a group and FALSE otherwise. all() will return TRUE when the logical inside it is TRUE for all rows in a group and FALSE otherwise.\n\nflights |&gt;\n  group_by(carrier) |&gt;\n  summarize(\n    any_late = any(arr_delay &gt; 0),\n    never_late = all(arr_delay &lt;=0)\n  )\n\n# A tibble: 16 × 3\n   carrier any_late never_late\n   &lt;chr&gt;   &lt;lgl&gt;    &lt;lgl&gt;     \n 1 9E      TRUE     FALSE     \n 2 AA      TRUE     FALSE     \n 3 AS      TRUE     FALSE     \n 4 B6      TRUE     FALSE     \n 5 DL      TRUE     FALSE     \n 6 EV      TRUE     FALSE     \n 7 F9      TRUE     FALSE     \n 8 FL      TRUE     FALSE     \n 9 HA      TRUE     FALSE     \n10 MQ      TRUE     FALSE     \n11 OO      TRUE     FALSE     \n12 UA      TRUE     FALSE     \n13 US      TRUE     FALSE     \n14 VX      TRUE     FALSE     \n15 WN      TRUE     FALSE     \n16 YV      TRUE     FALSE"
  },
  {
    "objectID": "materials/03_computing.html",
    "href": "materials/03_computing.html",
    "title": "HPAM 7660 - Week 3 Materials",
    "section": "",
    "text": "Video"
  },
  {
    "objectID": "materials/03_computing.html#tuesday-january-30",
    "href": "materials/03_computing.html#tuesday-january-30",
    "title": "HPAM 7660 - Week 3 Materials",
    "section": "",
    "text": "Video"
  },
  {
    "objectID": "materials/03_computing.html#thursday-february-1",
    "href": "materials/03_computing.html#thursday-february-1",
    "title": "HPAM 7660 - Week 3 Materials",
    "section": "Thursday, February 1",
    "text": "Thursday, February 1\n\nNone"
  },
  {
    "objectID": "materials/01_intro.html",
    "href": "materials/01_intro.html",
    "title": "HPAM 7660 - Week 1 Materials",
    "section": "",
    "text": "Slides - Course Introduction"
  },
  {
    "objectID": "materials/01_intro.html#tuesday-january-16",
    "href": "materials/01_intro.html#tuesday-january-16",
    "title": "HPAM 7660 - Week 1 Materials",
    "section": "",
    "text": "Slides - Course Introduction"
  },
  {
    "objectID": "materials/01_intro.html#thursday-january-18",
    "href": "materials/01_intro.html#thursday-january-18",
    "title": "HPAM 7660 - Week 1 Materials",
    "section": "Thursday, January 18",
    "text": "Thursday, January 18\n\nAssignment - Introduce Yourself\nSlides - U.S. Health Policy Landscape"
  },
  {
    "objectID": "assignments/tutorial_1.html",
    "href": "assignments/tutorial_1.html",
    "title": "Getting Started with R, R Studio, Git, and Github",
    "section": "",
    "text": "In this tutorial, we’re going to get R, RStudio, and R Markdown set up on your computer. To get started, follow these steps:\n\nDownload and install the most recent version of R. There are versions available for the Windows, Mac, and Linux operating systems. On a Windows computer, you will want to install using the R-x.y.z-win.exe file where x.y.z is a version number. On a Mac, you will want to install using the R-x.y.z.pkg file that is notarized and signed.\nWith R installed, download and install RStudio. RStudio is a type of “integrated development environment” or IDE designed for R. It makes working with R considerably easier and is available for most platforms. It is also free.\nInstall the packages we will use throughout the semester. To do this, either type or copy and paste each of the following lines of code into the “Console” in RStudio (lower left panel by default). Make sure you do this separately for each line. If you are asked if you want to install any packages from source, type “no”. Note that the symbols next to my_package are a less than sign &lt; followed by a minus sign - with no space between them. (Don’t be worried if you see some red text here. Those are usually just messages telling you information about the packages you are installing. Unless you see the word Error you should be fine.)\n\n\nmy_packages &lt;- c(\"tidyverse\", \"usethis\", \"devtools\", \"learnr\",\n                 \"tinytex\", \"gitcreds\", \"gapminder\")\ninstall.packages(my_packages, repos = \"http://cran.rstudio.com\")\nremotes::install_github(\"kosukeimai/qss-package\", build_vignettes = TRUE)\n\n\nFor some things in the course, we’ll need produce PDFs from R and that requires something called LaTeX. If you’ve never heard of that, it’s completely fine and you should just run the following two lines of R code:\n\n\ninstall.packages('tinytex')\ntinytex::install_tinytex()  # install TinyTeX"
  },
  {
    "objectID": "assignments/tutorial_1.html#installing-r-and-rstudio",
    "href": "assignments/tutorial_1.html#installing-r-and-rstudio",
    "title": "Getting Started with R, R Studio, Git, and Github",
    "section": "",
    "text": "In this tutorial, we’re going to get R, RStudio, and R Markdown set up on your computer. To get started, follow these steps:\n\nDownload and install the most recent version of R. There are versions available for the Windows, Mac, and Linux operating systems. On a Windows computer, you will want to install using the R-x.y.z-win.exe file where x.y.z is a version number. On a Mac, you will want to install using the R-x.y.z.pkg file that is notarized and signed.\nWith R installed, download and install RStudio. RStudio is a type of “integrated development environment” or IDE designed for R. It makes working with R considerably easier and is available for most platforms. It is also free.\nInstall the packages we will use throughout the semester. To do this, either type or copy and paste each of the following lines of code into the “Console” in RStudio (lower left panel by default). Make sure you do this separately for each line. If you are asked if you want to install any packages from source, type “no”. Note that the symbols next to my_package are a less than sign &lt; followed by a minus sign - with no space between them. (Don’t be worried if you see some red text here. Those are usually just messages telling you information about the packages you are installing. Unless you see the word Error you should be fine.)\n\n\nmy_packages &lt;- c(\"tidyverse\", \"usethis\", \"devtools\", \"learnr\",\n                 \"tinytex\", \"gitcreds\", \"gapminder\")\ninstall.packages(my_packages, repos = \"http://cran.rstudio.com\")\nremotes::install_github(\"kosukeimai/qss-package\", build_vignettes = TRUE)\n\n\nFor some things in the course, we’ll need produce PDFs from R and that requires something called LaTeX. If you’ve never heard of that, it’s completely fine and you should just run the following two lines of R code:\n\n\ninstall.packages('tinytex')\ntinytex::install_tinytex()  # install TinyTeX"
  },
  {
    "objectID": "assignments/tutorial_1.html#installing-and-configuring-git",
    "href": "assignments/tutorial_1.html#installing-and-configuring-git",
    "title": "Getting Started with R, R Studio, Git, and Github",
    "section": "Installing and configuring git",
    "text": "Installing and configuring git\nGit is a version control program that helps organize the process of writing and maintaining code. It allows you to maintain a history of edits to your code without having to resort to a set of files like:\nmy_code.R\nmy_code_v1.R\nmy_code_v2_FINAL.R\nThere’s a lot to git and it will be hard to use in the beginning if you’re not familiar, but in the long term there are large benefits. First, when you use git, you are much less likely to encounter a devastating data failure. All of your (committed) changes to your project are preserved, even when you make new changes or you revert old changes.\nGit is also a very useful way for people to collaborate. There is a large community built up around it and, once your projects are publicly available on Github (a website for hosting git repositories), there are a host of ways that people can collaborate with you.\n\nInstall git\nYou might already have git installed on your computer, especially if you have a Mac. To check, in RStudio, click on the Terminal tab in the bottom-left panel (next to the Console tab). Type git --version at the command prompt. If you get a response with a version number, great you are all set. If you get any kind of error message, then you’ll need to install git.\n##Git install for Windows Download Git here. Note that if you are asked about “Adjusting your PATH environment”, you should select “Git from the command line and also from 3rd-party software.” Also note that RStudio will want Git installed in the \"C:/Program Files\" path.\n##Git install for Mac Open the terminal and type git --version to elicit an offer to install developer command line tools. Accept the offer and click on “install”.\n\n\nSetup a GitHub account\nNext, you can setup a GitHub account. You can think of GitHub as similar to Dropbox or Google Drive for your git projects (“repositories”) where everything is public by default. Since you might use this account to interact with potential employers in the future, you should probably pick a professional username.\nOnce you have a GitHub account, you can configure your local git program to interact with your GitHub account. Run the following two lines of code in the Terminal replacing \"Bruce Springsteen\" with your name and \"bruce@tulane.edu\" with your email address used to sign up for GitHub.\ngit config --global user.name \"Bruce Springsteen\"\ngit config --global user.email \"bruce@tulane.edu\"\nYou will not see any output when you enter these commands. To check that they worked, enter the following command at the Terminal:\ngit config --list\nYou should see your name and email address listed in the output.\n\n\nSet up RStudio to talk to GitHub\nWe also need to set up RStudio to be able to communicate with GitHub securely. This requires a process that we luckily only have to do once. Basically, we need to get a secret code from GitHub and store it in RStudio (kind of like an app-specific password when you’re using two-factor authentication). We can start the process by entering the following code at the R Console (not the Terminal):\n\nusethis::create_github_token()\n\nThis will open a page on GitHub asking you to create a “Personal Access Token” or PAT (this is the secret code). You’ll have to give the PAT a note that describes what it’s for and choose an expiration date. To minimize problems throughout the semester, you should set it to a date after the semester ends such as 12/31/2024. Keep the “scope” selections as they are and click the “Generate Token” button at the bottom of the page.\n\nYou will then see a new screen with a long sequence of letters. This is your token or secret code. You should treat it like a password and do not share it with anyone. Copy this by hitting the button with the two boxes.\n\nOnce you have copied the PAT, call gitcreds::gitcreds_set() from the RStudio console and paste the PAT when prompted. You should see the following:\n&gt; gitcreds::gitcreds_set()\n? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n-&gt; Adding new credentials...\n-&gt; Removing credentials from cache...\n-&gt; Done.\nOnce this is done, you should be all set for RStudio to communicate with GitHub. If you have any problems with the PAT process or want to know more about it, the Happy Git and GitHub for the useR book has a great chapter about it.\n\n\nCreating your first repo\nOnce you are logged into Github and at its homepage, you can now create a new repo (shorthand for “repository”). These repositories are like folders in Dropbox except a bit more structured. Create one by clicking on the green “New” button in the top-left of the screen next to “Repositories.” It should look like this:\n\nNow a new screen should pop up requesting some information for the new repo. Give this new Repository the name hpam7660-tutorial_1 and set it to be a private repository. You can give it an informative description and check the “Initialize this repository with a README” checkbox. This latter option will add a README to the repository where you can add more information that will display nicely in the repository’s homepage. Your setup should look something like this:\n\nOnce you create your repo, you are ready to connect it to RStudio on your local computer. The easiest way to do this is go to the repo homepage (you’re already there if you’ve just created it) and click on the green “Code” button toward the top right of the page. When you click that, a popup will appear and you can copy the URL (you can click the little clipboard icon to copy this automatically).\n\nNow, switch to RStudio. Go to the menu bar and hit “File &gt; New Project”. You can then choose what type of project to start. Since we’re importing from Github, we’ll use the “Version Control” option (it’s the bottom of the list). In the next menu, choose “Git”. Now, you can paste the URL in the “Repository URL” box. Choose a set of local directories to place this project and hit “Create Project”. And now you’ll have your project ready to go in RStudio."
  },
  {
    "objectID": "assignments/tutorial_1.html#working-with-a-project-in-rstudio",
    "href": "assignments/tutorial_1.html#working-with-a-project-in-rstudio",
    "title": "Getting Started with R, R Studio, Git, and Github",
    "section": "Working with a project in RStudio",
    "text": "Working with a project in RStudio\nYou’ll see in the bottom right window of RStudio you’ll now see the files from your Github project.\n\nLet’s edit the README file by clicking on README.md in that file pane and you’ll be able to edit it in the top-left pane. Change the header from # gov-50-problem-set0 to # Introduction and save the file (⌘+S or Ctrl+S). If you click on the “Git” tab in the top right panel, you will a list of the changes you’ve made to the repo since the last commit (you can think of a commit as a more permanent type of saving work to the git repo).\n\nOne thing you’ll notice here is that git thinks that gov50-problem-set0.Rproj is a file that maybe should go into the repo. But this file is just for our local copy of RStudio and shouldn’t really go into the repo. To prevent git from bothering us about it every time we open something, we can modify the .gitignore file to tell git to ignore certain files. Open .gitignore and add a new line with *.Rproj on it to tell git to ignore any file with the extension .Rproj. Make sure to save the file.\n\nIf you go back to the Git tab in the top right and refresh (little circular arrow in the top right corner), you see that gov50-problem-set0.Rproj is removed from our list. Now we are ready to commit our changes. Click the “Staged” box for .gitignore and README.md and hit the “Commit” button just above the file list. You’ll see a window with the changes that you are about to commit.\n\nYou can click on different files to see what exactly you are changing. Add a short but informative commit message that describes what you are committing and hit “Commit”. Once this completes, you can hit the “Push” button in the top right to push that commit back to Github.\n\nIf you go back to your repo’s homepage on Github and refresh the page, you’ll see the updates to your README file and the new .gitignore.\n\nAnd you’re done! You’ve just created your first repo."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About HPAM 7660",
    "section": "",
    "text": "Course Description\nHPAM 7660 - Health Policy Analysis presents an overview of health policy in the United States – its scope, its dynamics, and its conceptual and practical dilemmas. The course is designed to acquaint students with major issues in the policymaking process, specifically in formulating, implementing, and assessing those patterns of government decision. Students will explore the history and structure of the American health care system, as well as explore a policy issue of their choosing using the Bardach analytical method.\n\n\nStudent Learning Objectives\n\nExhibit a conceptual understanding of the forces and factors accounting for legislation and regulation pertaining to health services.\n\nDevelop a framework to critically discuss and evaluate policy issues affecting the U.S. health care system.\n\nCompare and contrast the public policy objectives of various stakeholders with the realities of the political process.\n\nCritically evaluate the research literature that examines the federal and state roles in health services.\n\nEvaluate current proposals advanced in Congress and by the private sector that impact health services delivery.\n\nDemonstrate a working understanding of the legislative process and the related federal and state regulation processes.\n\n\n\n\nCourse Instructors\n\n\n\n\n\n\n   Kevin Callison, PhD\n   Tidewater 1915\n   kcallison@tulane.edu\n   Webpage\n\n\n\n\n\n\n\n\n\n   Chip Kahn, CEO Federation of American Hospitals\n   Webpage\n\n\n\n\n\nCourse Website\nThe formatting of this website and much of the content is derived from Matt Blackwell’s Gov 50 course at Harvard University, which he has generously made available for use."
  },
  {
    "objectID": "assignments/index.html",
    "href": "assignments/index.html",
    "title": "Assignments",
    "section": "",
    "text": "Having problems: check our Troubleshooting Guide"
  },
  {
    "objectID": "assignments/index.html#tutorials",
    "href": "assignments/index.html#tutorials",
    "title": "Assignments",
    "section": "Tutorials",
    "text": "Tutorials\n\nTutorial Instructions\nTutorial 1: Data Visualization\nTutorial 2: Data Wrangling\nTutorial 3: Causality\nTutorial 4: Summarizing Data\nTutorial 5: Correlation and Tidying Data\nTutorial 6: Loops\nTutorial 7: Regression and Sampling\nTutorial 8: Bootstrap"
  },
  {
    "objectID": "assignments/index.html#problem-sets",
    "href": "assignments/index.html#problem-sets",
    "title": "Assignments",
    "section": "Problem Sets",
    "text": "Problem Sets\n\nSubmission guide for problem sets\nProblem set 0: Setting up R, RStudio, and GitHub\nProblem set 1: Data visualization\nProblem set 2: Data wrangling\nProblem set 3: Causality\nProblem set 4: Summarizing data\nProblem set 5: Regression\nProblem set 6: Sampling\nProblem set 7: Bootstrap\nProblem set 8: Hypothesis testing"
  },
  {
    "objectID": "assignments/index.html#final-project",
    "href": "assignments/index.html#final-project",
    "title": "Assignments",
    "section": "Final Project",
    "text": "Final Project\n\nFinal project information\nFinal project milestone 1: Creating a repo"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\n            Health Policy Analysis\n        ",
    "section": "",
    "text": "Health Policy Analysis\n        \n        \n            Using data and causal inference to inform evidence-based policy\n        \n        \n            HPAM 7660 • Spring 2024Tulane University\n        \n    \n    \n      \n        \n        \n        \n      \n    \n\n\n\n\nInstructor\n\n   Kevin Callison\n   Tidewater 1915\n   kcallison@tulane.edu\n\n\n\nCourse details\n\n   Tuesday/Thursday\n   1:00–2:15 PM\n   Tidewater 1202\n\n\n\nContacting me\nI’ll have office hours in Tidwater 1915 and on Zoom on Tuesdays and Thursdays after class. If that time doesn’t work for you, please email me and we can find a time that does. I’m also in my office most days from 9 to 5, so please feel free to stop by."
  },
  {
    "objectID": "materials/02_overview.html",
    "href": "materials/02_overview.html",
    "title": "HPAM 7660 - Week 2 Materials",
    "section": "",
    "text": "Intro Scenario Results, Data, R Script\nReading - Fedorowicz and Aron (2021) – Improving Evidence-Based Policymaking\nReading - NYT Opinion Piece on Chevron (non-required reading for those interested)\nAssignment - Reading Discussion Questions\nSlides - Policy Analysis Overview"
  },
  {
    "objectID": "materials/02_overview.html#tuesday-january-23",
    "href": "materials/02_overview.html#tuesday-january-23",
    "title": "HPAM 7660 - Week 2 Materials",
    "section": "",
    "text": "Intro Scenario Results, Data, R Script\nReading - Fedorowicz and Aron (2021) – Improving Evidence-Based Policymaking\nReading - NYT Opinion Piece on Chevron (non-required reading for those interested)\nAssignment - Reading Discussion Questions\nSlides - Policy Analysis Overview"
  },
  {
    "objectID": "materials/02_overview.html#thursday-january-25",
    "href": "materials/02_overview.html#thursday-january-25",
    "title": "HPAM 7660 - Week 2 Materials",
    "section": "Thursday, January 25",
    "text": "Thursday, January 25\n\nReading - Erdman (2018) - An 8-step proces to making well-informed decisions\nMemo Example - Prescription Drug Costs (non-required reading, good example of Bardach Steps 1 and 4)\nMemo Example - California EITC (non-required reading, good example of Bardach Step 3)\nSlides - Policy Analysis Overview - Writing and Effective Policy Memo using the Bardach Eightfold Path"
  },
  {
    "objectID": "materials/index.html",
    "href": "materials/index.html",
    "title": "Course Slides",
    "section": "",
    "text": "Below you will find links to the slides used in class. I will typically post slides before each class period.\n\nCourse Introduction Slides"
  },
  {
    "objectID": "resources/index.html#software-installation-guides",
    "href": "resources/index.html#software-installation-guides",
    "title": "HPAM 7660 Resources",
    "section": "Software Installation Guides",
    "text": "Software Installation Guides\n\nGetting Software Set Up\nTroubleshooting Guide"
  },
  {
    "objectID": "resources/index.html#r-tutorials",
    "href": "resources/index.html#r-tutorials",
    "title": "HPAM 7660 Resources",
    "section": "R Tutorials",
    "text": "R Tutorials\n\nHands On Programming with R\nR for Data Science\nR Programming Cheatsheet"
  },
  {
    "objectID": "resources/index.html#r-markdown",
    "href": "resources/index.html#r-markdown",
    "title": "HPAM 7660 Resources",
    "section": "R Markdown",
    "text": "R Markdown\n\nR Markdown Tutorial\nR Markdown: The Definitive Guide"
  },
  {
    "objectID": "resources/index.html#git-and-github-resources",
    "href": "resources/index.html#git-and-github-resources",
    "title": "HPAM 7660 Resources",
    "section": "Git and GitHub Resources",
    "text": "Git and GitHub Resources\n\nHappy Git with R"
  },
  {
    "objectID": "resources/speaker-series.html",
    "href": "resources/speaker-series.html",
    "title": "Gov 50 Speaker Series",
    "section": "",
    "text": "More details to come…"
  },
  {
    "objectID": "resources/troubleshooting.html",
    "href": "resources/troubleshooting.html",
    "title": "Troubleshooting for RStudio and GitHub",
    "section": "",
    "text": "If you are missing your Git tab in RStudio, the most likely culprit is that you simply don’t have the RStudio project for the repository open in RStudio. In the upper right-hand corner of RStudio, you can see the current project that is open. If you do not have a project open, you might see this:\n\nTo get to your project, simply click on that Project: (None) button to reveal a list of recent projects, from which you will usually see the one you are working on:"
  },
  {
    "objectID": "resources/troubleshooting.html#missing-git-tab-in-rstudio",
    "href": "resources/troubleshooting.html#missing-git-tab-in-rstudio",
    "title": "Troubleshooting for RStudio and GitHub",
    "section": "",
    "text": "If you are missing your Git tab in RStudio, the most likely culprit is that you simply don’t have the RStudio project for the repository open in RStudio. In the upper right-hand corner of RStudio, you can see the current project that is open. If you do not have a project open, you might see this:\n\nTo get to your project, simply click on that Project: (None) button to reveal a list of recent projects, from which you will usually see the one you are working on:"
  },
  {
    "objectID": "resources/troubleshooting.html#errors-pushing-to-github",
    "href": "resources/troubleshooting.html#errors-pushing-to-github",
    "title": "Troubleshooting for RStudio and GitHub",
    "section": "Errors pushing to GitHub",
    "text": "Errors pushing to GitHub\nIf you trying to push to GitHub and you get an error saying something like:\n\n/usr/bin/git push origin HEAD:refs/heads/main To https://github.com/gov50-f23/gov-50-hw-2-mattblackwell.git ! [rejected] HEAD -&gt; main (non-fast-forward) error: failed to push some refs to ‘https://github.com/gov50-f23/gov-50-hw-2-mattblackwell.git’ hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: ‘git pull …’) before pushing again. hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.\n\nThis can happen if you edit the repository manually on the GitHub website rather than in your local version. Sometimes you can fix this problem by simply hitting the “Pull” button in RStudio:\n\nIf this solves your problem, great! If you get an error message when trying to pull, then you’ll need to resolve the conflicts manually. First start a new session of RStudio by going to the Session menu and hitting “New Session”:\n\nThis will open a new RStudio window. In this new window, we are going to create a new project from the same repository. When creating this new project, be sure to add _new to the end of the project directory name:\n\nNow you should have two RStudio sessions with two different projects: the original local one and a new one directly from GitHub:\n\nAssuming you want to overwrite whatever is on the GitHub website with what is on you local computer, copy the contents of your Rmd file from the old RStudio project to the same Rmd file in the new RStudio project. In the new RStudio project, knit the Rmd file, commit any changes, and then push to GitHub. Thew new RStudio project should be all synced now.\nOnce you are confident that the new project has all of the changes that you want, simply delete the old RStudio project from your computer."
  },
  {
    "objectID": "resources/troubleshooting.html#files-larger-than-100-mb",
    "href": "resources/troubleshooting.html#files-larger-than-100-mb",
    "title": "Troubleshooting for RStudio and GitHub",
    "section": "Files larger than 100 MB",
    "text": "Files larger than 100 MB\nIf you get a push error complaining about files greater than 100 MB, you will need to follow similar steps to the “pull error” steps in the last section. Once you have copied over the contents of your Rmd files, you can then add your data files. For files over 100 MB, you will add them to the the .gitignore file of your new repository. To do this, add the file to your new repository and it will show up in the Git tab. Right-click on the new file in the Git tab and hit the Ignore button:\n\nA dialog box will open and you can hit “Save” which will add or amend a .gitignore file in your repository. You should then stage and commit that .gitignore file and push.\n\nA good practice would be to now write an Rmd file or R script that will load the ignored big data file, subset it to certain rows and columns and then save the file as a csv file using write_csv(). Once you get that csv file to under 100 MB, you can commit that file and use it as the main data file in your main Rmd file."
  },
  {
    "objectID": "staff.html",
    "href": "staff.html",
    "title": "Course Staff",
    "section": "",
    "text": "Kevin Callison\n   Tidewater 1915\n   kcallison@tulane.edu\n   ?var:instructor.twitter\n   Schedule an appointment\n\n\n\n\n\n\n\n\n\n\n\n\n   Laura Royden\n   lroyden@g.harvard.edu\n\n\n\n\n\n\n\n\n\n\n\n\n   Ahmet Akbiyik\n   ahmetakbiyik@g.harvard.edu\n\n\n\n\n\n\n\n\n\n   Ada Cruz ’24\n   acruz@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Katherine Jackson ’25\n   katherinejackson@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   James René Jolin ’24\n   jamesjolin@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Ethan Miles\n   ethanmiles@g.harvard.edu\n\n\n\n\n\n\n\n\n\n   Jerry Min\n   jiemin@fas.harvard.edu\n\n\n\n\n\n\n\n\n\n   Pranav Moudgalya ’26\n   pmoudgalya@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Christopher Shen ’26\n   christopher_shen@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Julio Solis Arce\n   jsolisarce@g.harvard.edu\n\n\n\n\n\n\n\n\n\n   Andy Wang ’23\n   azwang@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Shriya Yarlagadda ’25\n   syarlagadda1@college.harvard.edu\n\n\n\n\n\n\n\n\n\n\n\n\n   Frank T. Berrios ’25\n\n\n\n\n\n\n\n\n\n   Mitja Bof ’26\n\n\n\n\n\n\n\n\n\n   Kate De Groote ’24\n\n\n\n\n\n\n\n\n\n   Alina Esanu ’24\n\n\n\n\n\n\n\n\n\n   Eric Forteza ’24\n\n\n\n\n\n\n\n\n\n   Alex Heuss ’26\n\n\n\n\n\n\n\n\n\n   Tracy Jiang ’24\n\n\n\n\n\n\n\n\n\n   Ryan McCarthy ’24\n\n\n\n\n\n\n\n\n\n   Zachary Mecca ’24\n\n\n\n\n\n\n\n\n\n   Chris Mesfin ’26\n\n\n\n\n\n\n\n\n\n   Vivian Nguyen ’24\n\n\n\n\n\n\n\n\n\n   Isa Peña ’24\n\n\n\n\n\n\n\n\n\n   Julia Poulson ’26\n\n\n\n\n\n\n\n\n\n   Gowri Rangu ’26\n\n\n\n\n\n\n\n\n\n   Azeez Richardson ’25\n\n\n\n\n\n\n\n\n\n   Cameron Snowden ’25\n\n\n\n\n\n\n\n\n\n   Jason Wang ’24"
  },
  {
    "objectID": "staff.html#head-instructor",
    "href": "staff.html#head-instructor",
    "title": "Course Staff",
    "section": "",
    "text": "Kevin Callison\n   Tidewater 1915\n   kcallison@tulane.edu\n   ?var:instructor.twitter\n   Schedule an appointment"
  },
  {
    "objectID": "staff.html#head-teaching-fellow",
    "href": "staff.html#head-teaching-fellow",
    "title": "Course Staff",
    "section": "",
    "text": "Laura Royden\n   lroyden@g.harvard.edu"
  },
  {
    "objectID": "staff.html#teaching-fellows",
    "href": "staff.html#teaching-fellows",
    "title": "Course Staff",
    "section": "",
    "text": "Ahmet Akbiyik\n   ahmetakbiyik@g.harvard.edu\n\n\n\n\n\n\n\n\n\n   Ada Cruz ’24\n   acruz@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Katherine Jackson ’25\n   katherinejackson@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   James René Jolin ’24\n   jamesjolin@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Ethan Miles\n   ethanmiles@g.harvard.edu\n\n\n\n\n\n\n\n\n\n   Jerry Min\n   jiemin@fas.harvard.edu\n\n\n\n\n\n\n\n\n\n   Pranav Moudgalya ’26\n   pmoudgalya@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Christopher Shen ’26\n   christopher_shen@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Julio Solis Arce\n   jsolisarce@g.harvard.edu\n\n\n\n\n\n\n\n\n\n   Andy Wang ’23\n   azwang@college.harvard.edu\n\n\n\n\n\n\n\n\n\n   Shriya Yarlagadda ’25\n   syarlagadda1@college.harvard.edu"
  },
  {
    "objectID": "staff.html#course-assistants",
    "href": "staff.html#course-assistants",
    "title": "Course Staff",
    "section": "",
    "text": "Frank T. Berrios ’25\n\n\n\n\n\n\n\n\n\n   Mitja Bof ’26\n\n\n\n\n\n\n\n\n\n   Kate De Groote ’24\n\n\n\n\n\n\n\n\n\n   Alina Esanu ’24\n\n\n\n\n\n\n\n\n\n   Eric Forteza ’24\n\n\n\n\n\n\n\n\n\n   Alex Heuss ’26\n\n\n\n\n\n\n\n\n\n   Tracy Jiang ’24\n\n\n\n\n\n\n\n\n\n   Ryan McCarthy ’24\n\n\n\n\n\n\n\n\n\n   Zachary Mecca ’24\n\n\n\n\n\n\n\n\n\n   Chris Mesfin ’26\n\n\n\n\n\n\n\n\n\n   Vivian Nguyen ’24\n\n\n\n\n\n\n\n\n\n   Isa Peña ’24\n\n\n\n\n\n\n\n\n\n   Julia Poulson ’26\n\n\n\n\n\n\n\n\n\n   Gowri Rangu ’26\n\n\n\n\n\n\n\n\n\n   Azeez Richardson ’25\n\n\n\n\n\n\n\n\n\n   Cameron Snowden ’25\n\n\n\n\n\n\n\n\n\n   Jason Wang ’24"
  }
]