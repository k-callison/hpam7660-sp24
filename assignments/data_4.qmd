---
title: "Data Assignment 4 - Data Visualization"
summary: >-
  Exercises in ModernDive Ch. 2 - Data Visualization
---

### Instructions

Complete the following assignment based on examples from [ModernDive Chapter 2 - Data Visualization ](https://moderndive.com/2-viz.html). We're going to do something a little different with this homework assignment than we've done in the past. You **are not** going to create a new GitHub repo for this assignment. Instead, once you've completed this assignment, you'll push it to your `hpam7660_Cancer_Alley` GitHub repo. 

To get started, first open the .Rproj file in your `hpam7660_Cancer_Alley` folder. Then open a new Markdown document and give it a YAML header that includes the title "HPAM 7660 Data Assignment 4", your name, the date, and "pdf_document" as the output format.

As you answer each of the following questions, be sure to include your R code and associated output in your Markdown document. Additionally, add a line or two describing what you're doing in each code chunk.

### Steps for Completing the Assignment

1. Describe the three essential components of data visualization. How are all three of these components incorporated in ModernDive Figure [2.1](https://moderndive.com/2-viz.html#fig:gapminder)?

2. Load the aggregate Louisiana cancer mortality data set you created at the end of the last in-class [tutorial](/assignments/tutorial_5.qmd). Note that the data set was called `la_joined_all` unless you chose a different name. If the data frame is not saved in your project file, then you can recreate it by repeating th steps in that tutorial.    

3. Use `ggplot` from the `ggplot2` package to create a scatterplot with county FIPS code on the x-axis and cancer mortality rates in 2019 on the y-axis. 

4. Now create a linegraph that displays cancer mortality rates from 2005 through 2019 for both Cancer Alley parishes and the non-Cancer Alley parishes in Louisiana. Note that there's a good chance that you'll run into the following error if you follow the example code in the book: 

```{r eval = FALSE}
Error in `geom_line()`:
! Problem while computing aesthetics.
ℹ Error occurred in the 1st layer.
Caused by error in `scale_f()`:
! A continuous variable cannot be mapped to the linetype aesthetic
ℹ choose a different aesthetic or use `scale_linetype_binned()`
```

This error happens because R thinks that the variable `cancer_parish` is a continuous variable rather than an indicator for whether a specific parish is in Cancer Alley. We need to tell R that the `cancer_parish` variable is an indicator rather than a continuous variable and we can do so by running the following line of code where `df` represents whatever name you gave to the data frame that will be used to create the linegraph (this may be `la_joined_all` or it may be another name if you've already created a new data frame from `la_joined_all`):  

```{r eval = FALSE}
df$cancer_parish <- factor(df$cancer_parish)
```

This code tells R that the variable `cancer_parish` in the `df` data frame should be interpreted as a factor variable. Once we run this code, we should avoid triggering the error code above. 

Your graph should look like the graph below:

![](/img/visual_1.png){fig-alt="cancer linegraph"}


5. We can use the `scale_y_continuous` option to change the y-axis values. Let's change the y-axis scale so that it ranges from 0 to 300. The code to do so is `scale_y_continuous(limits = c(0, 300))`. This tells R that the y-axis scale is continuous and it ranges from a low of 0 to a high of 300. Remember that each time you add an option to your `ggplot` command, you'll want to add a `+` sign before the new option. Your graph should now look like this: 

![](/img/visual_2.png){fig-alt="cancer linegraph scaled"}

6. This is looking better, but let's make a few more adjustments. First, let's fix the values on the x-axis so that it displays all the years in our data. This is similar to the way we changed the y-axis values in the last step with one slight difference. We want to make sure R includes *all* values of year between 2005 and 2019, so we use the following `ggplot` option `scale_x_continuous(breaks = seq(2005, 2019, by = 1))`. This tells R that the x-axis scale is continuous and it contains sequential values of year from 2005 through 2019. Your modified graph should look like this:

![](/img/visual_3.png){fig-alt="cancer linegraph year"}

7. Now let's change the legend so that it clearly indicates which line represents the Cancer Alley parishes. Here, we'll use the `scale_linetype_discrete` option with the following arguments:

```{r eval = FALSE}
scale_linetype_discrete(name = NULL, labels = c("Rest of Louisiana","Cancer Alley"), guide = guide_legend(reverse = TRUE)) 
```

This tells R that we want to remove the legend title, label the lines "Rest of Louisiana" and "Cancer Alley", and then switch their ordering in the legend so that "Cancer Alley" comes first. Add this to your `ggplot` command to produce a graph that looks like this: 

![](/img/visual_4.png){fig-alt="cancer linegraph legend"}

8. Finally, let's title the chart "Cancer Mortality Rate Comparison", title the y-axis "Cancer Deaths per 100,000 Residents", and remove the x-axis title since it's obvious the x-axis scale is in years. We can do this with the `labs` option as follows:

```{r eval = FALSE}
labs(title = "Cancer Mortality Rate Comparison", y = "Cancer Deaths per 100,000 Residents", x = NULL) 
```

And the output should look like this:

![](/img/visual_5.png){fig-alt="cancer linegraph complete"}

Now we have a pretty good linegraph of cancer rates over time for Cancer Alley and non-Cancer Alley parishes in Louisiana. Perhaps surprisingly, cancer mortality rates are higher in non-Cancer Alley parishes. However, we want to be careful drawing any firm conclusions from this chart since we're still dealing with crude cancer mortality rates and need to make a few more adjustments to the data.

9. Before we finish, let's look at one more commonly used data visualization - the barchart. We'll use the barchart to visualize differences in cancer mortality rates across Cancer Alley parishes. First, create a barchart that plots average cancer mortality rates for Cancer Alley parishes (and only Cancer Alley Parishes) between 2005 and 2019. To be clear, you'll have one value for each Cancer Alley parish and that value will be the average of the annual cancer mortality rates between 2005 and 2019. 

You'll also need to tell R that county should be treated as a factor variable and not a continuous variable (just like we did with `cancer_parish` above). Otherwise, you'll get all values between 0 and 125 on the x-axis, which will create a bunch of empty space. To tell R that county should be treated as a factor variable, you can use this line of code `df$county <- factor(df$county)` where the `df` represents whatever name you gave to the data frame that will be used to create the barchart. Your barchart should look like this:

![](/img/visual_6.png){fig-alt="cancer barchart"}

10. Now let's clean up this barchart the way we did with the linegraph. Change the y-scale so that it ranges from 0 to 300, re-title the y-axis "Cancer Deaths per 100,000 Residents" and the x-axis "County", and give the chart the title "Average Cancer Alley Mortality Rates by County, 2005-2019". Your modified barchart should look like this:

![](/img/visual_7.png){fig-alt="cancer barchart scaled"}

11. This looks good, but it would be more helpful if the x-axis labels were the parish names instead of the parish FIPS codes. Add the following option to make this change:

```{r eval = FALSE}
scale_x_discrete(labels = c("5" = "Acension",
                              "33" = "East Baton Rouge",
                              "47" = "Iberville",
                              "51" = "Jefferson",
                              "71" = "Orleans",
                              "89" = "St. Charles",
                              "93" = "St. James",
                              "95" = "St. John the Baptist",
                              "121" = "West Baton Rouge")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

This code does two things. First, it tells R to replace the county FIPS code labels with parish names on the x-axis. Second it tells R to rotate these x-axis labels by 45 degrees and adjust the horizontal alignment so that the names don't overlap. To see what I mean, you can drop the `theme` option and you'll end up with a jumbled x-axis. Your barchart should now look like this: 

![](/img/visual_8.png){fig-alt="cancer barchart complete"}

12. Once you’ve finished Step 11, knit your PDF document and push it to your GitHub repo. Make sure the document shows up in the repo, invite me to the repo, and you’re done!